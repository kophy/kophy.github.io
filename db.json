{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1584317025000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1584317025000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1584317025000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1584317025000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1584317025000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1584317025000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1584317025000},{"_id":"themes/next/README.md","hash":"f386e8501c7863368669b4737b24acfe733b2c02","modified":1584317025000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1584317025000},{"_id":"themes/next/_config.yml","hash":"96f23ee6947b8e7e3ab18cdcca6c4218d37ab261","modified":1593813611680},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1584317025000},{"_id":"themes/next/package.json","hash":"6be512ba52a3f9edb27f4db15c8cc166741af3e9","modified":1584317025000},{"_id":"source/_posts/guava-quick-notes.md","hash":"12d888d7cc5f770ce5801e611278bb4f19bf60b6","modified":1593757131915},{"_id":"source/_posts/m5-forecasting.md","hash":"8e6d2bc773a887a8a46f469a2e52aa34d461d889","modified":1593822954346},{"_id":"source/_posts/my-2018.md","hash":"34d81f91440912ffc113e0505ff56340536128e1","modified":1590448495041},{"_id":"source/about/index.md","hash":"73e93ddd6b42573e844ec1a7fc172d9dcf354bfc","modified":1590448495042},{"_id":"source/tags/index.md","hash":"38055e03653d80c553b4fbee92a627a5718662a1","modified":1590448495042},{"_id":"themes/next/.git/FETCH_HEAD","hash":"f820d03f6d1d0dcbff86f1a32e3db461d0c295cc","modified":1593812506797},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1584317024000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1584317025000},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1584317025000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"1b1ae75d7cd88545cf665858fb1f9ec9d9d92f07","modified":1593812506834},{"_id":"themes/next/.git/index","hash":"f480aeda7cf7c88fd27a0e04400b2bb3c55d956c","modified":1590448882580},{"_id":"themes/next/.git/packed-refs","hash":"9ec39fb9cb508d1e0802bd7f632c7f056192a583","modified":1584317025000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1584317025000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1584317025000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"a2d79aab360d121ac2e8b2e088c9b4da6251e15e","modified":1584317025000},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1584317025000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1584317025000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1584317025000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1584317025000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1584317025000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1584317025000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1584317025000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1584317025000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1584317025000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1584317025000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"a6e625cb0805a5c246820c561ba8f7f59c9b5659","modified":1584317025000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1584317025000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1584317025000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1584317025000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1584317025000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1584317025000},{"_id":"themes/next/languages/ar.yml","hash":"c5d6fa35b57fa2bfab4a8a3b66fc52b5673f1ba5","modified":1584317025000},{"_id":"themes/next/languages/de.yml","hash":"109943f7adcd5cdbe4c6c95c9d279603f07edacb","modified":1584317025000},{"_id":"themes/next/languages/es.yml","hash":"53ef4a621fd628748b8ed711fe86080e9c9c91c8","modified":1584317025000},{"_id":"themes/next/languages/fa.yml","hash":"a24e0cf28e9f137d0d2219498778693c3c3960b2","modified":1584317025000},{"_id":"themes/next/languages/en.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1584317025000},{"_id":"themes/next/languages/fr.yml","hash":"578a30a51b9ecbbcb4c200362ad9a37ffd3272db","modified":1584317025000},{"_id":"themes/next/languages/hu.yml","hash":"074d069af9aed5ad34fa809bd058a3b9e2d01051","modified":1584317025000},{"_id":"themes/next/languages/id.yml","hash":"6037450ecd02796e08ca2e98037845b7c30c2807","modified":1584317025000},{"_id":"themes/next/languages/ja.yml","hash":"5e13b521201944815665bd077b65d7ce69622b81","modified":1584317025000},{"_id":"themes/next/languages/it.yml","hash":"ba2c8f51f2f719dabe71b6053c6fe6866161ec66","modified":1584317025000},{"_id":"themes/next/languages/ko.yml","hash":"4aa8f3bf06e02879863b19901476cb23ecd2d709","modified":1584317025000},{"_id":"themes/next/languages/nl.yml","hash":"e27b29c60d88ef4c30de291b595cf8cad639c5d1","modified":1584317025000},{"_id":"themes/next/languages/pt-BR.yml","hash":"0660471e067d01ec80962d5721ae282aafff274d","modified":1584317025000},{"_id":"themes/next/languages/tr.yml","hash":"145d28f6f051129dc6393affe8f68cd7ba925078","modified":1584317025000},{"_id":"themes/next/languages/pt.yml","hash":"f7516b9d86b52c80bf63d3efc7ee6fd985205001","modified":1584317025000},{"_id":"themes/next/languages/ru.yml","hash":"a5381aab2a94bc5599f5b427f7d5a1a39949c4ce","modified":1584317025000},{"_id":"themes/next/languages/uk.yml","hash":"df54b2149c70bd64f7bd375e5833fe07660da237","modified":1584317025000},{"_id":"themes/next/languages/vi.yml","hash":"ffc144f606e171fdd8cdb41808ac36e406015a54","modified":1584317025000},{"_id":"themes/next/languages/zh-HK.yml","hash":"2620632caa3c94022d9513ab1971d15512e737e7","modified":1584317025000},{"_id":"themes/next/languages/zh-TW.yml","hash":"0964e90406bbd495e901d6b9d5f10124c8cad950","modified":1584317025000},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1584317025000},{"_id":"themes/next/languages/zh-CN.yml","hash":"f22d66ef7a93811ff932986e9e5d69a320db5d96","modified":1584317025000},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1584317025000},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1584317025000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1584317025000},{"_id":"themes/next/layout/page.swig","hash":"ae6c8549242c1fb2483fd68ce9ae1c083785e2ff","modified":1584317025000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1584317025000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1584317025000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1584317025000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1584317025000},{"_id":"source/_posts/m5-forecasting/importance.png","hash":"766e30a490d5bec80fa4ed4901a426c8382f3927","modified":1593760273629},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1584317024000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1584317024000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1584317024000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1584317024000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1584317024000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1584317024000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1584317024000},{"_id":"themes/next/.git/logs/HEAD","hash":"161e7f1c4210ce442a51d411386217002a82d7c9","modified":1584317025000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a0ba801dce9a69bd278f2ce9c625c998b6017aec","modified":1584317025000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"3addbf4af97b2f4d78d31df5d45cc6c7a8a314f5","modified":1584317025000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8268ae467ae9ad878c4c77024cf1d87d0e8da374","modified":1584317025000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"c5a671ca9565466dfa7a9469686bb1ca1ac5ea3d","modified":1584317025000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1584317025000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1584317025000},{"_id":"themes/next/docs/ru/README.md","hash":"8ad46d0fb67f6aeaadb9a2c3adb7b23604355723","modified":1584317025000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"a80a2ece86306b5520d7790777660d122ea6b5cc","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"ce213745ad2cdb95f010207694fa8363e7d9436b","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1584317025000},{"_id":"themes/next/layout/_macro/post.swig","hash":"662d1abb78285fb849c3306e4594a35264eee0dc","modified":1584317025000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1584317025000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1584317025000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"bbfd5828a442ba01043f9ae5dcfa843973152055","modified":1584319973000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1584317025000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1584317025000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1584317025000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1584317025000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1584317025000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1584317025000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1584317025000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1584317025000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1584317025000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1584317025000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1584317025000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1584317025000},{"_id":"themes/next/source/css/_colors.styl","hash":"6a5ae9c02d12ee56a5b5222d676ac0a71d7aaa56","modified":1584317025000},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1584317025000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1584317025000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1584317025000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584317025000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1584317025000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1584317025000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1584317025000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584317025000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584317025000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1584317025000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1584317025000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1584317025000},{"_id":"themes/next/source/js/algolia-search.js","hash":"7b6acc9ab1693c5dcb3835176a61e9293038b8ae","modified":1584317025000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1584317025000},{"_id":"themes/next/source/js/local-search.js","hash":"3cf4df5e1f804d33226cec67be47e63923be1c9d","modified":1584317025000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1584317025000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1584317025000},{"_id":"themes/next/source/js/utils.js","hash":"a9c71e085f1168c4bbd42b0e4ce85de1998bafb8","modified":1584317025000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1584317025000},{"_id":"themes/next/scripts/events/index.js","hash":"17dcb0a74abd4101a8319cacabbc43ad9291eb89","modified":1584317025000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c504e03b628aa9fa02ed6b4d8325ff175ac646ac","modified":1584317025000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1584317025000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1584317025000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1584317025000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1584317025000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1584317025000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1584317025000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1584317025000},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1584317025000},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1584317025000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1584317025000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1584317025000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1584317025000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1584317025000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1584317025000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1584317025000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1584317025000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1584317025000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1584317025000},{"_id":"themes/next/.git/objects/pack/pack-65ddbff0b3a65c4ce6b5c2d8d29c616c9f5d41bf.idx","hash":"529efdbcf6627ef6f518ac986f2bc10f79fdb6d5","modified":1593812506681},{"_id":"themes/next/.git/refs/heads/master","hash":"1b1ae75d7cd88545cf665858fb1f9ec9d9d92f07","modified":1584317025000},{"_id":"themes/next/.git/refs/tags/v7.8.0","hash":"2a4c19ef63045d5f503b7e462250df801e8bf80d","modified":1593812506796},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"5ff544013e2905138ffeb07bf9a57062faed75b2","modified":1584317025000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1584317025000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"d3a16f0f343ea70b59e33e4b9cdecae3c8df91cd","modified":1584317025000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1584317025000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1584317025000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1584317025000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1584317025000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1584317025000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1584317025000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"9c9399da67b47c1a0ebe195b4513b6f2db126911","modified":1584317025000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b8d289f300e7cf84cdb440314990b2780ec7dd10","modified":1584317025000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1584317025000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1584317025000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1584317025000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1584317025000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1584317025000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1584317025000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1584317025000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1584317025000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"7809e60dfbb0c87a4a44190da7db36a19ce1204f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1584317025000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1584317025000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"3e17e2dd1c4c1b6b01be63f26e79b28fa5bba800","modified":1593769149472},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"38597817ede20418e73ae4afc50047ea5088c73e","modified":1584317025000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1584317025000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"0630492f39630f81cc586511dc5432ce0143ab62","modified":1593758085165},{"_id":"themes/next/source/css/_variables/base.styl","hash":"64fb213996c22135276913ee1dec569a8078200f","modified":1584323775000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1584317025000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1584317025000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1584317025000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1584317025000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1584317025000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1584317025000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1584317025000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"161e7f1c4210ce442a51d411386217002a82d7c9","modified":1584317025000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1584317025000},{"_id":"themes/next/.git/refs/remotes/origin/i18n","hash":"4117c696ba23fa14fc6a37d1e1cbddf4f569828b","modified":1593812506733},{"_id":"themes/next/.git/refs/remotes/origin/logo","hash":"e8ea5f7bd7e91d1805e56416bfe0fde4dc23eaee","modified":1593812506735},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"7b5894d5fc28d7797285dac4f43134462f6c7c5d","modified":1593812506731},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8b9156ae47f4c58cf6cf7505cdd22bae7022481f","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"00d73105cb7b872e12d82d1dacbb15d5c2b58291","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"4794bd45d5e32ea005c805bcbc65b871e9927d02","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"3a2ecb6e32374a56f0ef059a6d3e3701339cf47b","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"2e52fa5c8f7de85d411733586405371a20a10c98","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"bb392700f04d956bb5f606efb052453efeade53d","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1584317025000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"161e7f1c4210ce442a51d411386217002a82d7c9","modified":1584317025000},{"_id":"themes/next/.git/logs/refs/remotes/origin/i18n","hash":"0a1e95d185b16eb237dedc31006c4bbc2963e50c","modified":1593812506734},{"_id":"themes/next/.git/logs/refs/remotes/origin/logo","hash":"ab2c828eb50ca5200b02ee1245d924680200ad88","modified":1593812506735},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"735074bb893364f21b61ca673a8b7c8bfd6afcdd","modified":1593812506732},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"c3f7f1fb7853f0d0fb827b93aa4ce39c84e72d5b","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"37e89462e614b734e13431d57a7d0e64331ccab6","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"887aa8de61ae060150a6312d5cb00d4da065db77","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"796415ae7490e17857e64ffef7e470b65c655a6b","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"8136f9efe1f018ebe4b4a2d8bd3683bb393ff456","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"5ac97054b302fe3ce47822a03a3b56aa3d582005","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"0ec7bafed7eec36504df7781207ccd1ce4448536","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1584317025000},{"_id":"themes/next/.git/objects/pack/pack-785158cd93e60b45240880af6746ecf9206f5224.idx","hash":"84ef346d67454352788e9cd7186ca5d6b41912be","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1584317025000},{"_id":"themes/next/.git/objects/pack/pack-65ddbff0b3a65c4ce6b5c2d8d29c616c9f5d41bf.pack","hash":"e061ed3a9587775bf262e1e23f24cb21affd669b","modified":1593812506679},{"_id":"themes/next/.git/objects/pack/pack-785158cd93e60b45240880af6746ecf9206f5224.pack","hash":"3a0e5ded30498b35da3b9d791a6daed267fe1488","modified":1584317025000},{"_id":"public/about/index.html","hash":"907c0ee16d1dc09b90cf0e834b23031e7bfb91a6","modified":1593822979816},{"_id":"public/tags/index.html","hash":"c2282a1b8eb1473837017a5b596a97c548ce3d16","modified":1593822979816},{"_id":"public/archives/index.html","hash":"697db8333543f29b0c5e3eb5eb8a6976aaf92427","modified":1593822979817},{"_id":"public/archives/2018/index.html","hash":"876ed309b38814d1ee87bf07f62ca143b0b528ea","modified":1593822979817},{"_id":"public/archives/2020/index.html","hash":"d03897de4ba9bc7eb04c6eae8eda021382ce2eee","modified":1593822979817},{"_id":"public/archives/2018/12/index.html","hash":"0977af315ce86804a05c81281de10246c368462a","modified":1593822979817},{"_id":"public/archives/2020/07/index.html","hash":"1ce0af84c119964486171057b6ba45783efb96c8","modified":1593822979817},{"_id":"public/2020/07/02/m5-forecasting/index.html","hash":"07b6ba5097fa2d6cae8de0b174d4b0e2e5c43d4b","modified":1593822979817},{"_id":"public/2018/12/30/my-2018/index.html","hash":"c630b376372786da9990d45a175adfb8527b0165","modified":1593822979817},{"_id":"public/2018/12/25/guava-quick-notes/index.html","hash":"4d2667144ad02adb900d6de072b0f352b1722edf","modified":1593822979818},{"_id":"public/index.html","hash":"62a3a86cc18d021afa001010386d435f6bebf27c","modified":1593822979818},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1593822979829},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1593822979829},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1593822979829},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1593822979829},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1593822979829},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1593822979829},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1593822979829},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1593822979829},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1593822979829},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1593822979830},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1593822979830},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1593822979830},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1593822979830},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1593822979830},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1593822979830},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1593822979830},{"_id":"public/2020/07/02/m5-forecasting/importance.png","hash":"766e30a490d5bec80fa4ed4901a426c8382f3927","modified":1593822979830},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1593822980222},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1593822980222},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1593822980222},{"_id":"public/js/algolia-search.js","hash":"7b6acc9ab1693c5dcb3835176a61e9293038b8ae","modified":1593822980224},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1593822980224},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1593822980224},{"_id":"public/js/local-search.js","hash":"3cf4df5e1f804d33226cec67be47e63923be1c9d","modified":1593822980224},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1593822980224},{"_id":"public/js/utils.js","hash":"a9c71e085f1168c4bbd42b0e4ce85de1998bafb8","modified":1593822980224},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1593822980224},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1593822980225},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1593822980225},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1593822980225},{"_id":"public/css/main.css","hash":"9efa028666f5e93c4c120876e9901a5345e5d608","modified":1593822980225},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1593822980225},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1593822980225},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1593822980225},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1593822980225},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1593822980227}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2018-02-08T08:13:23.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-02-08 00:13:23\n---\n","updated":"2020-05-25T23:14:55.042Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckc6x1tis000034tzzquzbaiy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-08T08:12:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-08 00:12:22\ntype: \"tags\"\n---\n","updated":"2020-05-25T23:14:55.042Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckc6x1tix000234tzop1iqx6q","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Guava Quick Notes","date":"2018-12-25T22:51:21.000Z","mathjax":true,"_content":"\n圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看[java8-tutorial](https://github.com/winterbe/java8-tutorial)，对Java的印象比~~试图~~用Java写Leetcode时好了许多，顺便看掉了Guava的文档。\nGuava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。\n\n<!-- more -->\n\n## Using/avoiding null\n\n这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：\n\n- null作为Set/Map的key -> 显示处理查询null的情况\n- null作为Map的value -> 用单独的Set记录value为null的key\n- null作为处理情形 -> 定义枚举值\n\n这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如`Map.get(key)`返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。\n\n`Optional<T>`是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。\n\n## Ordering\n\n文档中将`Ordering`形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。\n一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：\n\n```Java\nclass Book {\n  public String name;\n  public int year;\n}\n// Java 8 Comparator\nbooks.sort(Comparator.comparing((Book x) -> x.name)\n                .thenComparing((Book x) -> x.year));\n\n// Guava Ordering\nOrdering<Book> byName = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.name.compareTo(book2.name);\n  }\n};\nOrdering<Book> byYear = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.year - book2.year;\n  }\n};\n\nbooks.sort(byName.compound(byYear));\n```\n\n它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；`Ordering`这时可读性更好，而且每个`Ordering`可以作为组件用于以后组装新`Ordering`。\n\n## Immutable Collection\n\n个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：\n\n```java\nBook book1 = new Book(\"book 1\", 2018);\nBook book2 = new Book(\"book 2\", 2018);\nBook book3 = new Book(\"book 3\", 2018);\n\nImmutableList<Book> immutableBooks = ImmutableList.of(book1, book2);\nbook1.name = \"renamed book 1\";\nimmutableBooks.get(1).name = \"renamed book 2\";\nimmutableBooks.add(book3);\t// UnsupportedOperationException\n```\n\n套用[ImmutableList and unmodifiableList](https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab)的解释：\n> The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.\n\n```mermaid\ngraph LR\n\t\t\t\tsubgraph Books\n\t\t\t\tbook1-->book2\n\t\t\t\tend\n\t\t\t\tbook1-->Object[Book1 Object]\n\t\t\t\timmutableBooks-->book1\n```\n\n用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。\n这么解释`ImmutableList`还是合理的，而`UnmodifiableList`套了一层wrapper就称为不可变实在太甜。\n\n实现元素不可变的方法很多，做法之一是用[auto](https://github.com/google/auto)中的`@AutoValue`:\n\n```Java\n@AutoValue\nabstract class Book {\n    public abstract String name();\n    public abstract int year();\n    public static Book create(String name, int year) {\n        return new AutoValue_Book(name, year);\n    }\n}\n```\n文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。\n\n## Others\n\n- `PeekingIterator`实现了`peek()`\n- `Cache`类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到\n- `Range `完善了一般的`pair<int, int>`实现，避免开闭区间的假定问题\n","source":"_posts/guava-quick-notes.md","raw":"---\ntitle: Guava Quick Notes\ndate: 2018-12-25 14:51:21\nmathjax: true\ntags:\n---\n\n圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看[java8-tutorial](https://github.com/winterbe/java8-tutorial)，对Java的印象比~~试图~~用Java写Leetcode时好了许多，顺便看掉了Guava的文档。\nGuava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。\n\n<!-- more -->\n\n## Using/avoiding null\n\n这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：\n\n- null作为Set/Map的key -> 显示处理查询null的情况\n- null作为Map的value -> 用单独的Set记录value为null的key\n- null作为处理情形 -> 定义枚举值\n\n这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如`Map.get(key)`返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。\n\n`Optional<T>`是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。\n\n## Ordering\n\n文档中将`Ordering`形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。\n一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：\n\n```Java\nclass Book {\n  public String name;\n  public int year;\n}\n// Java 8 Comparator\nbooks.sort(Comparator.comparing((Book x) -> x.name)\n                .thenComparing((Book x) -> x.year));\n\n// Guava Ordering\nOrdering<Book> byName = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.name.compareTo(book2.name);\n  }\n};\nOrdering<Book> byYear = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.year - book2.year;\n  }\n};\n\nbooks.sort(byName.compound(byYear));\n```\n\n它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；`Ordering`这时可读性更好，而且每个`Ordering`可以作为组件用于以后组装新`Ordering`。\n\n## Immutable Collection\n\n个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：\n\n```java\nBook book1 = new Book(\"book 1\", 2018);\nBook book2 = new Book(\"book 2\", 2018);\nBook book3 = new Book(\"book 3\", 2018);\n\nImmutableList<Book> immutableBooks = ImmutableList.of(book1, book2);\nbook1.name = \"renamed book 1\";\nimmutableBooks.get(1).name = \"renamed book 2\";\nimmutableBooks.add(book3);\t// UnsupportedOperationException\n```\n\n套用[ImmutableList and unmodifiableList](https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab)的解释：\n> The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.\n\n```mermaid\ngraph LR\n\t\t\t\tsubgraph Books\n\t\t\t\tbook1-->book2\n\t\t\t\tend\n\t\t\t\tbook1-->Object[Book1 Object]\n\t\t\t\timmutableBooks-->book1\n```\n\n用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。\n这么解释`ImmutableList`还是合理的，而`UnmodifiableList`套了一层wrapper就称为不可变实在太甜。\n\n实现元素不可变的方法很多，做法之一是用[auto](https://github.com/google/auto)中的`@AutoValue`:\n\n```Java\n@AutoValue\nabstract class Book {\n    public abstract String name();\n    public abstract int year();\n    public static Book create(String name, int year) {\n        return new AutoValue_Book(name, year);\n    }\n}\n```\n文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。\n\n## Others\n\n- `PeekingIterator`实现了`peek()`\n- `Cache`类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到\n- `Range `完善了一般的`pair<int, int>`实现，避免开闭区间的假定问题\n","slug":"guava-quick-notes","published":1,"updated":"2020-07-03T06:18:51.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6x1tit000134tzptiy782x","content":"<p>圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看<a href=\"https://github.com/winterbe/java8-tutorial\" target=\"_blank\" rel=\"noopener\">java8-tutorial</a>，对Java的印象比<del>试图</del>用Java写Leetcode时好了许多，顺便看掉了Guava的文档。<br>Guava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。</p>\n<a id=\"more\"></a>\n<h2 id=\"Using-avoiding-null\"><a href=\"#Using-avoiding-null\" class=\"headerlink\" title=\"Using/avoiding null\"></a>Using/avoiding null</h2><p>这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：</p>\n<ul>\n<li>null作为Set/Map的key -&gt; 显示处理查询null的情况</li>\n<li>null作为Map的value -&gt; 用单独的Set记录value为null的key</li>\n<li>null作为处理情形 -&gt; 定义枚举值</li>\n</ul>\n<p>这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如<code>Map.get(key)</code>返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。</p>\n<p><code>Optional&lt;T&gt;</code>是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。</p>\n<h2 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h2><p>文档中将<code>Ordering</code>形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。<br>一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java 8 Comparator</span></span><br><span class=\"line\">books.sort(Comparator.comparing((Book x) -&gt; x.name)</span><br><span class=\"line\">                .thenComparing((Book x) -&gt; x.year));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Guava Ordering</span></span><br><span class=\"line\">Ordering&lt;Book&gt; byName = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.name.compareTo(book2.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Ordering&lt;Book&gt; byYear = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.year - book2.year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">books.sort(byName.compound(byYear));</span><br></pre></td></tr></table></figure>\n<p>它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；<code>Ordering</code>这时可读性更好，而且每个<code>Ordering</code>可以作为组件用于以后组装新<code>Ordering</code>。</p>\n<h2 id=\"Immutable-Collection\"><a href=\"#Immutable-Collection\" class=\"headerlink\" title=\"Immutable Collection\"></a>Immutable Collection</h2><p>个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book book1 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 1\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book2 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 2\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book3 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 3\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ImmutableList&lt;Book&gt; immutableBooks = ImmutableList.of(book1, book2);</span><br><span class=\"line\">book1.name = <span class=\"string\">\"renamed book 1\"</span>;</span><br><span class=\"line\">immutableBooks.get(<span class=\"number\">1</span>).name = <span class=\"string\">\"renamed book 2\"</span>;</span><br><span class=\"line\">immutableBooks.add(book3);\t<span class=\"comment\">// UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>\n<p>套用<a href=\"https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab\" target=\"_blank\" rel=\"noopener\">ImmutableList and unmodifiableList</a>的解释：</p>\n<blockquote>\n<p>The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\n                subgraph Books\n                book1-->book2\n                end\n                book1-->Object[Book1 Object]\n                immutableBooks-->book1</pre>\n\n<p>用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。<br>这么解释<code>ImmutableList</code>还是合理的，而<code>UnmodifiableList</code>套了一层wrapper就称为不可变实在太甜。</p>\n<p>实现元素不可变的方法很多，做法之一是用<a href=\"https://github.com/google/auto\" target=\"_blank\" rel=\"noopener\">auto</a>中的<code>@AutoValue</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoValue</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">year</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Book <span class=\"title\">create</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> year)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoValue_Book(name, year);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。</p>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><ul>\n<li><code>PeekingIterator</code>实现了<code>peek()</code></li>\n<li><code>Cache</code>类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到</li>\n<li><code>Range</code>完善了一般的<code>pair&lt;int, int&gt;</code>实现，避免开闭区间的假定问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看<a href=\"https://github.com/winterbe/java8-tutorial\" target=\"_blank\" rel=\"noopener\">java8-tutorial</a>，对Java的印象比<del>试图</del>用Java写Leetcode时好了许多，顺便看掉了Guava的文档。<br>Guava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。</p>","more":"<h2 id=\"Using-avoiding-null\"><a href=\"#Using-avoiding-null\" class=\"headerlink\" title=\"Using/avoiding null\"></a>Using/avoiding null</h2><p>这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：</p>\n<ul>\n<li>null作为Set/Map的key -&gt; 显示处理查询null的情况</li>\n<li>null作为Map的value -&gt; 用单独的Set记录value为null的key</li>\n<li>null作为处理情形 -&gt; 定义枚举值</li>\n</ul>\n<p>这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如<code>Map.get(key)</code>返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。</p>\n<p><code>Optional&lt;T&gt;</code>是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。</p>\n<h2 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h2><p>文档中将<code>Ordering</code>形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。<br>一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java 8 Comparator</span></span><br><span class=\"line\">books.sort(Comparator.comparing((Book x) -&gt; x.name)</span><br><span class=\"line\">                .thenComparing((Book x) -&gt; x.year));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Guava Ordering</span></span><br><span class=\"line\">Ordering&lt;Book&gt; byName = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.name.compareTo(book2.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Ordering&lt;Book&gt; byYear = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.year - book2.year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">books.sort(byName.compound(byYear));</span><br></pre></td></tr></table></figure>\n<p>它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；<code>Ordering</code>这时可读性更好，而且每个<code>Ordering</code>可以作为组件用于以后组装新<code>Ordering</code>。</p>\n<h2 id=\"Immutable-Collection\"><a href=\"#Immutable-Collection\" class=\"headerlink\" title=\"Immutable Collection\"></a>Immutable Collection</h2><p>个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book book1 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 1\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book2 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 2\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book3 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 3\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ImmutableList&lt;Book&gt; immutableBooks = ImmutableList.of(book1, book2);</span><br><span class=\"line\">book1.name = <span class=\"string\">\"renamed book 1\"</span>;</span><br><span class=\"line\">immutableBooks.get(<span class=\"number\">1</span>).name = <span class=\"string\">\"renamed book 2\"</span>;</span><br><span class=\"line\">immutableBooks.add(book3);\t<span class=\"comment\">// UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>\n<p>套用<a href=\"https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab\" target=\"_blank\" rel=\"noopener\">ImmutableList and unmodifiableList</a>的解释：</p>\n<blockquote>\n<p>The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\n                subgraph Books\n                book1-->book2\n                end\n                book1-->Object[Book1 Object]\n                immutableBooks-->book1</pre>\n\n<p>用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。<br>这么解释<code>ImmutableList</code>还是合理的，而<code>UnmodifiableList</code>套了一层wrapper就称为不可变实在太甜。</p>\n<p>实现元素不可变的方法很多，做法之一是用<a href=\"https://github.com/google/auto\" target=\"_blank\" rel=\"noopener\">auto</a>中的<code>@AutoValue</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoValue</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">year</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Book <span class=\"title\">create</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> year)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoValue_Book(name, year);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。</p>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><ul>\n<li><code>PeekingIterator</code>实现了<code>peek()</code></li>\n<li><code>Cache</code>类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到</li>\n<li><code>Range</code>完善了一般的<code>pair&lt;int, int&gt;</code>实现，避免开闭区间的假定问题</li>\n</ul>"},{"title":"My 2018","date":"2018-12-30T20:40:31.000Z","_content":"\n\n年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。\n\n<!-- more -->\n\n## 工作\n\n我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。\n十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。\n\n### Golang\n\nGolang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。\n恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(`goroutine`/`channel`)，但不支持重载和泛型（`interface{}`基本就是`void*`）。\n\n### Spark\n\n这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。\nYARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。\n\n业务相关和内部工具不便记录，在此不表。\n\n### Personal\n\n除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有*Head First Design Pattern*和*HTTP: The Definitive Guide*(临时恶补或读了几章的书就不好意思列出来了)。\n今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。\n\n---\n\n本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：\n> “如果有人比我厉害，我怎么努力都捡不到年糕呢？”\n> “那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”\n\n## 生活\n### 番剧\n\n2018年对我影响最大的番剧(从低到高)：\n*Darling in the Franxx*，*少女歌剧*，*假面骑士Build*，*非自然死亡*，*Zombieland Saga*\n有国家队出现说明影响是褒贬兼有~~(虽然不算PTSD)~~，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：\n\n> “现在开始你就是我的darling了！”\n> “无法触及，因而耀眼。”\n> “既然如此，答案就只有一个了！”\n> “死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”\n> “偶像之道在于悟彻死亡。”\n\n2018始于Franxx，终于Franchouchou~~我就等着买昭和偶像黏土小人了~~。\n\n### 旅行\n\n不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。\n这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。\n\n### 其它\n\n9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。\n开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。\n买BiliBili，Facebook和Apple股票亏了不少钱。\n夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了~~玩还是要一鼓作气~~。\n\n## 新年计划\n\n- 提升工作中非技术能力，总结/交涉/~~甩锅/~~etc\n- 继续夯实CS基础\n- 精读一些system design和deep learning方面的paper\n- 学会开车\n- 养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)\n- 每2~3个月旅行一次\n\n> 就这样持续前行，今夜也将留下独自一人笔直的足迹。\n","source":"_posts/my-2018.md","raw":"---\ntitle: My 2018\ndate: 2018-12-30 12:40:31\ntags:\n---\n\n\n年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。\n\n<!-- more -->\n\n## 工作\n\n我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。\n十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。\n\n### Golang\n\nGolang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。\n恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(`goroutine`/`channel`)，但不支持重载和泛型（`interface{}`基本就是`void*`）。\n\n### Spark\n\n这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。\nYARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。\n\n业务相关和内部工具不便记录，在此不表。\n\n### Personal\n\n除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有*Head First Design Pattern*和*HTTP: The Definitive Guide*(临时恶补或读了几章的书就不好意思列出来了)。\n今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。\n\n---\n\n本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：\n> “如果有人比我厉害，我怎么努力都捡不到年糕呢？”\n> “那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”\n\n## 生活\n### 番剧\n\n2018年对我影响最大的番剧(从低到高)：\n*Darling in the Franxx*，*少女歌剧*，*假面骑士Build*，*非自然死亡*，*Zombieland Saga*\n有国家队出现说明影响是褒贬兼有~~(虽然不算PTSD)~~，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：\n\n> “现在开始你就是我的darling了！”\n> “无法触及，因而耀眼。”\n> “既然如此，答案就只有一个了！”\n> “死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”\n> “偶像之道在于悟彻死亡。”\n\n2018始于Franxx，终于Franchouchou~~我就等着买昭和偶像黏土小人了~~。\n\n### 旅行\n\n不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。\n这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。\n\n### 其它\n\n9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。\n开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。\n买BiliBili，Facebook和Apple股票亏了不少钱。\n夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了~~玩还是要一鼓作气~~。\n\n## 新年计划\n\n- 提升工作中非技术能力，总结/交涉/~~甩锅/~~etc\n- 继续夯实CS基础\n- 精读一些system design和deep learning方面的paper\n- 学会开车\n- 养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)\n- 每2~3个月旅行一次\n\n> 就这样持续前行，今夜也将留下独自一人笔直的足迹。\n","slug":"my-2018","published":1,"updated":"2020-05-25T23:14:55.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6x1tix000334tzggu0aikj","content":"<p>年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。</p>\n<a id=\"more\"></a>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。<br>十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。</p>\n<h3 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h3><p>Golang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。<br>恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(<code>goroutine</code>/<code>channel</code>)，但不支持重载和泛型（<code>interface{}</code>基本就是<code>void*</code>）。</p>\n<h3 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h3><p>这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。<br>YARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。</p>\n<p>业务相关和内部工具不便记录，在此不表。</p>\n<h3 id=\"Personal\"><a href=\"#Personal\" class=\"headerlink\" title=\"Personal\"></a>Personal</h3><p>除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有<em>Head First Design Pattern</em>和<em>HTTP: The Definitive Guide</em>(临时恶补或读了几章的书就不好意思列出来了)。<br>今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。</p>\n<hr>\n<p>本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：</p>\n<blockquote>\n<p>“如果有人比我厉害，我怎么努力都捡不到年糕呢？”<br>“那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h3 id=\"番剧\"><a href=\"#番剧\" class=\"headerlink\" title=\"番剧\"></a>番剧</h3><p>2018年对我影响最大的番剧(从低到高)：<br><em>Darling in the Franxx</em>，<em>少女歌剧</em>，<em>假面骑士Build</em>，<em>非自然死亡</em>，<em>Zombieland Saga</em><br>有国家队出现说明影响是褒贬兼有<del>(虽然不算PTSD)</del>，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：</p>\n<blockquote>\n<p>“现在开始你就是我的darling了！”<br>“无法触及，因而耀眼。”<br>“既然如此，答案就只有一个了！”<br>“死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”<br>“偶像之道在于悟彻死亡。”</p>\n</blockquote>\n<p>2018始于Franxx，终于Franchouchou<del>我就等着买昭和偶像黏土小人了</del>。</p>\n<h3 id=\"旅行\"><a href=\"#旅行\" class=\"headerlink\" title=\"旅行\"></a>旅行</h3><p>不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。<br>这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。<br>开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。<br>买BiliBili，Facebook和Apple股票亏了不少钱。<br>夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了<del>玩还是要一鼓作气</del>。</p>\n<h2 id=\"新年计划\"><a href=\"#新年计划\" class=\"headerlink\" title=\"新年计划\"></a>新年计划</h2><ul>\n<li>提升工作中非技术能力，总结/交涉/<del>甩锅/</del>etc</li>\n<li>继续夯实CS基础</li>\n<li>精读一些system design和deep learning方面的paper</li>\n<li>学会开车</li>\n<li>养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)</li>\n<li>每2~3个月旅行一次</li>\n</ul>\n<blockquote>\n<p>就这样持续前行，今夜也将留下独自一人笔直的足迹。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。</p>","more":"<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。<br>十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。</p>\n<h3 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h3><p>Golang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。<br>恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(<code>goroutine</code>/<code>channel</code>)，但不支持重载和泛型（<code>interface{}</code>基本就是<code>void*</code>）。</p>\n<h3 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h3><p>这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。<br>YARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。</p>\n<p>业务相关和内部工具不便记录，在此不表。</p>\n<h3 id=\"Personal\"><a href=\"#Personal\" class=\"headerlink\" title=\"Personal\"></a>Personal</h3><p>除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有<em>Head First Design Pattern</em>和<em>HTTP: The Definitive Guide</em>(临时恶补或读了几章的书就不好意思列出来了)。<br>今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。</p>\n<hr>\n<p>本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：</p>\n<blockquote>\n<p>“如果有人比我厉害，我怎么努力都捡不到年糕呢？”<br>“那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h3 id=\"番剧\"><a href=\"#番剧\" class=\"headerlink\" title=\"番剧\"></a>番剧</h3><p>2018年对我影响最大的番剧(从低到高)：<br><em>Darling in the Franxx</em>，<em>少女歌剧</em>，<em>假面骑士Build</em>，<em>非自然死亡</em>，<em>Zombieland Saga</em><br>有国家队出现说明影响是褒贬兼有<del>(虽然不算PTSD)</del>，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：</p>\n<blockquote>\n<p>“现在开始你就是我的darling了！”<br>“无法触及，因而耀眼。”<br>“既然如此，答案就只有一个了！”<br>“死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”<br>“偶像之道在于悟彻死亡。”</p>\n</blockquote>\n<p>2018始于Franxx，终于Franchouchou<del>我就等着买昭和偶像黏土小人了</del>。</p>\n<h3 id=\"旅行\"><a href=\"#旅行\" class=\"headerlink\" title=\"旅行\"></a>旅行</h3><p>不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。<br>这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。<br>开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。<br>买BiliBili，Facebook和Apple股票亏了不少钱。<br>夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了<del>玩还是要一鼓作气</del>。</p>\n<h2 id=\"新年计划\"><a href=\"#新年计划\" class=\"headerlink\" title=\"新年计划\"></a>新年计划</h2><ul>\n<li>提升工作中非技术能力，总结/交涉/<del>甩锅/</del>etc</li>\n<li>继续夯实CS基础</li>\n<li>精读一些system design和deep learning方面的paper</li>\n<li>学会开车</li>\n<li>养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)</li>\n<li>每2~3个月旅行一次</li>\n</ul>\n<blockquote>\n<p>就这样持续前行，今夜也将留下独自一人笔直的足迹。</p>\n</blockquote>"},{"title":"M5 Forecasting Accuracy","date":"2020-07-03T06:13:40.000Z","mathjax":true,"_content":"\n最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/...），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。\n\n<!-- more -->\n\n记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。\n\n## 背景\n\n### 比赛介绍\n\n简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：\n\n- sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。\n- calendar.csv：每天的日期以及是不是节日等额外信息。\n- sell_prices.csv：各超市、各商品每天的价格。\n\n需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。\n\n比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。\n\n第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。\n\n### 软硬件条件\n\n为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。\n\n软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。\n\n## 思路和工具\n\n### Direct vs Recusive Prediction\n\n这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。\n\n{% asset_img importance.png %}\n\n但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：\n\n1.  一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。\n2. 一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。\n3. 分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。\n\n其中#1和#3是direct model，#2是recursive model。Pros & Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。\n\n### Model\n\n模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的~~（至少1000%才行）~~，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了`bagging_fraction`参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。\n\n我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：\n\n```python\n# Before training.\nlabel_encoders = {}\nfor col in CAT_FEATURES:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])\n    label_encoders[col] = le\n...\n# After training.\nfor col in CAT_FEATURES:\n    df[col] = label_encoders[col].inverse_transform(v[col])\n```\n\n而LightGBM只要在生成Dataset的时候声明一下：\n\n```python\ntrain_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)\n```\n\n值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。\n\n所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的[解答](https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216)，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。\n\n## 反思 & 规划\n\n其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。\n\n我自己学习的原则是\"go one layer deeper\"，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。","source":"_posts/m5-forecasting.md","raw":"---\ntitle: M5 Forecasting Accuracy\ndate: 2020-07-02 23:13:40\nmathjax: true\ntags:\n---\n\n最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/...），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。\n\n<!-- more -->\n\n记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。\n\n## 背景\n\n### 比赛介绍\n\n简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：\n\n- sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。\n- calendar.csv：每天的日期以及是不是节日等额外信息。\n- sell_prices.csv：各超市、各商品每天的价格。\n\n需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。\n\n比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。\n\n第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。\n\n### 软硬件条件\n\n为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。\n\n软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。\n\n## 思路和工具\n\n### Direct vs Recusive Prediction\n\n这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。\n\n{% asset_img importance.png %}\n\n但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：\n\n1.  一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。\n2. 一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。\n3. 分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。\n\n其中#1和#3是direct model，#2是recursive model。Pros & Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。\n\n### Model\n\n模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的~~（至少1000%才行）~~，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了`bagging_fraction`参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。\n\n我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：\n\n```python\n# Before training.\nlabel_encoders = {}\nfor col in CAT_FEATURES:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])\n    label_encoders[col] = le\n...\n# After training.\nfor col in CAT_FEATURES:\n    df[col] = label_encoders[col].inverse_transform(v[col])\n```\n\n而LightGBM只要在生成Dataset的时候声明一下：\n\n```python\ntrain_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)\n```\n\n值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。\n\n所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的[解答](https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216)，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。\n\n## 反思 & 规划\n\n其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。\n\n我自己学习的原则是\"go one layer deeper\"，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。","slug":"m5-forecasting","published":1,"updated":"2020-07-04T00:35:54.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6x1tiy000434tzlw45n3ot","content":"<p>最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/…），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。</p>\n<a id=\"more\"></a>\n<p>记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"比赛介绍\"><a href=\"#比赛介绍\" class=\"headerlink\" title=\"比赛介绍\"></a>比赛介绍</h3><p>简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：</p>\n<ul>\n<li>sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。</li>\n<li>calendar.csv：每天的日期以及是不是节日等额外信息。</li>\n<li>sell_prices.csv：各超市、各商品每天的价格。</li>\n</ul>\n<p>需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。</p>\n<p>比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。</p>\n<p>第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。</p>\n<h3 id=\"软硬件条件\"><a href=\"#软硬件条件\" class=\"headerlink\" title=\"软硬件条件\"></a>软硬件条件</h3><p>为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。</p>\n<p>软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。</p>\n<h2 id=\"思路和工具\"><a href=\"#思路和工具\" class=\"headerlink\" title=\"思路和工具\"></a>思路和工具</h2><h3 id=\"Direct-vs-Recusive-Prediction\"><a href=\"#Direct-vs-Recusive-Prediction\" class=\"headerlink\" title=\"Direct vs Recusive Prediction\"></a>Direct vs Recusive Prediction</h3><p>这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。</p>\n<img src=\"/2020/07/02/m5-forecasting/importance.png\">\n<p>但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：</p>\n<ol>\n<li>一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。</li>\n<li>一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。</li>\n<li>分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。</li>\n</ol>\n<p>其中#1和#3是direct model，#2是recursive model。Pros &amp; Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的<del>（至少1000%才行）</del>，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了<code>bagging_fraction</code>参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。</p>\n<p>我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Before training.</span></span><br><span class=\"line\">label_encoders = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    le = LabelEncoder()</span><br><span class=\"line\">    df[col] = le.fit_transform(df[col])</span><br><span class=\"line\">    label_encoders[col] = le</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># After training.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    df[col] = label_encoders[col].inverse_transform(v[col])</span><br></pre></td></tr></table></figure>\n<p>而LightGBM只要在生成Dataset的时候声明一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)</span><br></pre></td></tr></table></figure>\n<p>值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。</p>\n<p>所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的<a href=\"https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216\" target=\"_blank\" rel=\"noopener\">解答</a>，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。</p>\n<h2 id=\"反思-amp-规划\"><a href=\"#反思-amp-规划\" class=\"headerlink\" title=\"反思 &amp; 规划\"></a>反思 &amp; 规划</h2><p>其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。</p>\n<p>我自己学习的原则是”go one layer deeper”，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。</p>\n","site":{"data":{}},"excerpt":"<p>最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/…），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。</p>","more":"<p>记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"比赛介绍\"><a href=\"#比赛介绍\" class=\"headerlink\" title=\"比赛介绍\"></a>比赛介绍</h3><p>简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：</p>\n<ul>\n<li>sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。</li>\n<li>calendar.csv：每天的日期以及是不是节日等额外信息。</li>\n<li>sell_prices.csv：各超市、各商品每天的价格。</li>\n</ul>\n<p>需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。</p>\n<p>比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。</p>\n<p>第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。</p>\n<h3 id=\"软硬件条件\"><a href=\"#软硬件条件\" class=\"headerlink\" title=\"软硬件条件\"></a>软硬件条件</h3><p>为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。</p>\n<p>软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。</p>\n<h2 id=\"思路和工具\"><a href=\"#思路和工具\" class=\"headerlink\" title=\"思路和工具\"></a>思路和工具</h2><h3 id=\"Direct-vs-Recusive-Prediction\"><a href=\"#Direct-vs-Recusive-Prediction\" class=\"headerlink\" title=\"Direct vs Recusive Prediction\"></a>Direct vs Recusive Prediction</h3><p>这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。</p>\n<img src=\"/2020/07/02/m5-forecasting/importance.png\">\n<p>但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：</p>\n<ol>\n<li>一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。</li>\n<li>一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。</li>\n<li>分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。</li>\n</ol>\n<p>其中#1和#3是direct model，#2是recursive model。Pros &amp; Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的<del>（至少1000%才行）</del>，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了<code>bagging_fraction</code>参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。</p>\n<p>我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Before training.</span></span><br><span class=\"line\">label_encoders = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    le = LabelEncoder()</span><br><span class=\"line\">    df[col] = le.fit_transform(df[col])</span><br><span class=\"line\">    label_encoders[col] = le</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># After training.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    df[col] = label_encoders[col].inverse_transform(v[col])</span><br></pre></td></tr></table></figure>\n<p>而LightGBM只要在生成Dataset的时候声明一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)</span><br></pre></td></tr></table></figure>\n<p>值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。</p>\n<p>所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的<a href=\"https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216\" target=\"_blank\" rel=\"noopener\">解答</a>，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。</p>\n<h2 id=\"反思-amp-规划\"><a href=\"#反思-amp-规划\" class=\"headerlink\" title=\"反思 &amp; 规划\"></a>反思 &amp; 规划</h2><p>其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。</p>\n<p>我自己学习的原则是”go one layer deeper”，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。</p>"}],"PostAsset":[{"_id":"source/_posts/m5-forecasting/importance.png","post":"ckc6x1tiy000434tzlw45n3ot","slug":"importance.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}