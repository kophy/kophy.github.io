{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1584317025000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1584317025000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1584317025000},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1595139043893},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1584317025000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1584317025000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1584317025000},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1595139043893},{"_id":"themes/next/_config.yml","hash":"f23a516d4a603ba08eb54a5b79f87c240360f962","modified":1595150267824},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1584317025000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1584317025000},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1595139043930},{"_id":"source/_drafts/juicer-crusher.md","hash":"bbcc7ace6b8b5e08a132c021b45987701e17f040","modified":1600646616770},{"_id":"source/tags/index.md","hash":"38055e03653d80c553b4fbee92a627a5718662a1","modified":1590448495042},{"_id":"source/_posts/aws-cloud-practitioner.md","hash":"9a1080bb61c2ae948a2433a834fbf0fce242d8b2","modified":1602963968978},{"_id":"source/_posts/guava-quick-notes.md","hash":"213cc89a4dd0ed723dbb7dac6cd1ff4ad22f7258","modified":1602963921911},{"_id":"source/_posts/m5-forecasting.md","hash":"8e6d2bc773a887a8a46f469a2e52aa34d461d889","modified":1593822954346},{"_id":"source/_posts/my-2018.md","hash":"ac9f8fe54839eb4af8794b79d5386b271e2fc097","modified":1602963727601},{"_id":"source/_posts/mid-autumn-updates.md","hash":"dfdd5773171e84dd0719f270227c4371881e3c38","modified":1603008589542},{"_id":"source/about/index.md","hash":"73e93ddd6b42573e844ec1a7fc172d9dcf354bfc","modified":1590448495042},{"_id":"themes/next/.git/FETCH_HEAD","hash":"ee19696a94fd1f4ae9b759b7040c0e6259f8a98a","modified":1595139043829},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1584317025000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"1b1ae75d7cd88545cf665858fb1f9ec9d9d92f07","modified":1595139043863},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1584317025000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1584317024000},{"_id":"themes/next/.git/index","hash":"c2583b75a1fb99384559a4a13285dc14cac5ee14","modified":1595148960823},{"_id":"themes/next/.git/packed-refs","hash":"9ec39fb9cb508d1e0802bd7f632c7f056192a583","modified":1584317025000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1584317025000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1584317025000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1584317025000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1595139043892},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1584317025000},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1595139043891},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1584317025000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1584317025000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1584317025000},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1595139043892},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1584317025000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1584317025000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1584317025000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1584317025000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1584317025000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1584317025000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1584317025000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1595139043895},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1584317025000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1584317025000},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1595139043897},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1595139043898},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1595138908720},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1595139043898},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1595139043899},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1595139043899},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1595139043900},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1595139043900},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1595139043901},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1595139043901},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1595139043902},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1595139043903},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1595139043902},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1595139043903},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1595139043904},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1595139043904},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1595139043905},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1595139043906},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1595139043906},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1595139043905},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1595139043907},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1595139043907},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1595139043908},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1595139043927},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1595139043928},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1595139043928},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1595139043929},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1595139043929},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1595139043930},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1584317025000},{"_id":"source/_posts/m5-forecasting/importance.png","hash":"766e30a490d5bec80fa4ed4901a426c8382f3927","modified":1593760273629},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1584317024000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1584317024000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1584317024000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1584317024000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1584317024000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1584317024000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1584317024000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1584317024000},{"_id":"themes/next/.git/logs/HEAD","hash":"00b05dcc3dff63b4909af85815222598e3037729","modified":1595139043966},{"_id":"themes/next/.git/refs/stash","hash":"44c5b3a04e5ccd956ed14d57e3f4587e14b80369","modified":1595138908680},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1595139043889},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1595139043890},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1595139043891},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1595139043890},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1584317025000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1584317025000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1584317025000},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1595139043895},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1595139043896},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1584317025000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1595139043897},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1584317025000},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1595139043909},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1595139043908},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1584317025000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1584317025000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4a4c71d6501f3fae38b25f312c6fa4c2eccde7b4","modified":1595139043909},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1595139043912},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1584317025000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1584317025000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1595139043926},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1584317025000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1584317025000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1584317025000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1584317025000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1584317025000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1595139043926},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1584317025000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1584317025000},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1595139043931},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1584317025000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1584317025000},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1595139043934},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1584317025000},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1595139043935},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1595139043935},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1584317025000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1595139043936},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1595139043936},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1595139043937},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1584317025000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1595139043937},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1584317025000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1584317025000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1584317025000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1584317025000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1584317025000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1584317025000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1595139043938},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1595139043938},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1595139043951},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1584317025000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584317025000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1584317025000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1584317025000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1584317025000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1584317025000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1584317025000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1584317025000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584317025000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584317025000},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1595139043956},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1595139043957},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1595139043957},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1584317025000},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1595139043958},{"_id":"themes/next/source/js/utils.js","hash":"53ce574c301a8b958e7f825beb193c77fb975e33","modified":1595139043959},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1584317025000},{"_id":"themes/next/.git/logs/refs/stash","hash":"95408468782d9f96e487ed4da6b92dd9f7de4a05","modified":1595138908681},{"_id":"themes/next/.git/objects/0b/695634f8067a0b065cfae703f3274fe330ce0d","hash":"2115497b015d8c81448bc56fb9d1d3d46e4fa360","modified":1595138908661},{"_id":"themes/next/.git/objects/32/32b7e3850acc5a0092d5f7e0d0b5d82b903c58","hash":"4cd73cc0da8b57e2b8d6d1868b430b932b374b4c","modified":1595138908664},{"_id":"themes/next/.git/objects/19/86e2ed60ee4826121d2a5c0e8a28c2cee4afcb","hash":"9018c11011d85d971591fbe2a018a59450da19c6","modified":1595138908650},{"_id":"themes/next/.git/objects/54/0a5fc8aa33a75802f6bffe39e0d6ad3e9b0ea1","hash":"f971523e0838d32ce9fc3eb5adeeb83ce419324b","modified":1595138908669},{"_id":"themes/next/.git/objects/31/ce34217dd69cd18c463cd3b0ead9a7d6078c41","hash":"0614b6b15affee979f71cd98c99d1006f11ce443","modified":1595138908666},{"_id":"themes/next/.git/objects/9a/794ae5268fa25eb3de503326114b2f80cde412","hash":"c95054f9397d3ec4d133c997cc54aae079d1fc4b","modified":1595138908672},{"_id":"themes/next/.git/objects/59/b6a72c6686e15545d6ff7da405628f238b160e","hash":"4135c56d6a7e80e5ac946a62acb2d85458f3f95d","modified":1595138908676},{"_id":"themes/next/.git/objects/87/68e993c77489dbbb8e33fa2546a89de2bdc920","hash":"8f8018597c6c53cf5b63ae1c5029db99d24f55a2","modified":1595138908653},{"_id":"themes/next/.git/objects/f0/023eb6935659272647aa7ef335c9934c4529ff","hash":"fd51aeec24fc76a08f589734652e96aa485474e8","modified":1595138908607},{"_id":"themes/next/.git/objects/be/9afc33f694417d5cb1cebfa4347da99a83e194","hash":"edf1a466d4d80a721cc49e01e9f13fe9c38f0a36","modified":1595138908647},{"_id":"themes/next/.git/objects/pack/pack-65ddbff0b3a65c4ce6b5c2d8d29c616c9f5d41bf.idx","hash":"529efdbcf6627ef6f518ac986f2bc10f79fdb6d5","modified":1593812506681},{"_id":"themes/next/.git/refs/heads/master","hash":"7b5894d5fc28d7797285dac4f43134462f6c7c5d","modified":1595139043965},{"_id":"themes/next/.git/refs/tags/v7.8.0","hash":"2a4c19ef63045d5f503b7e462250df801e8bf80d","modified":1593812506796},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1595139043911},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1595139043911},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1595139043912},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1595139043912},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1584317025000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1595139043910},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1595139043910},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1584317025000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1595139043913},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1595139043913},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1595139043914},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1584317025000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1584317025000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1584317025000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1595139043914},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1595139043915},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1595139043915},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1584317025000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1584317025000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1584317025000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1584317025000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1584317025000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1584317025000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1584317025000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1584317025000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1584317025000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1595139043926},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1584317025000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1595139043927},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1584317025000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1584317025000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1584317025000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1584317025000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1595139043932},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1584317025000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1595139043932},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1595139043933},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1595139043933},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1584317025000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1595139043934},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1595138908721},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1595139043955},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1584317025000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"93ad1af778fc83e94e41fadb26460e99613c68f0","modified":1595141993931},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1595139043956},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1595139043958},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1595139043959},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1584317025000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1584317025000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5569980ab8750932e516b438b1945f0e4503e72f","modified":1595139043966},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1584317025000},{"_id":"themes/next/.git/refs/remotes/origin/i18n","hash":"4117c696ba23fa14fc6a37d1e1cbddf4f569828b","modified":1593812506733},{"_id":"themes/next/.git/refs/remotes/origin/logo","hash":"e8ea5f7bd7e91d1805e56416bfe0fde4dc23eaee","modified":1593812506735},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"7b5894d5fc28d7797285dac4f43134462f6c7c5d","modified":1593812506731},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1595139043945},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1595139043946},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1595139043947},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1595139043947},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1595139043949},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1595139043951},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1595139043952},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1595139043952},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1595139043953},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1584317025000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1595139043953},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1595139043954},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1595139043954},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1584317025000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1595139043961},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1595139043960},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1595139043961},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1595139043962},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"161e7f1c4210ce442a51d411386217002a82d7c9","modified":1584317025000},{"_id":"themes/next/.git/logs/refs/remotes/origin/i18n","hash":"0a1e95d185b16eb237dedc31006c4bbc2963e50c","modified":1593812506734},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"735074bb893364f21b61ca673a8b7c8bfd6afcdd","modified":1593812506732},{"_id":"themes/next/.git/logs/refs/remotes/origin/logo","hash":"ab2c828eb50ca5200b02ee1245d924680200ad88","modified":1593812506735},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1595139043940},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1595139043941},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1595139043942},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1595139043942},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1595139043939},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1595139043941},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1595139043939},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1595139043940},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1584317025000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1595139043943},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1595139043943},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1595139043944},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1595139043945},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1595139043944},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1595139043946},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1584317025000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1595139043948},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1595139043948},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1595139043949},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1584317025000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1595139043950},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1595139043950},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1584317025000},{"_id":"themes/next/.git/objects/pack/pack-785158cd93e60b45240880af6746ecf9206f5224.idx","hash":"84ef346d67454352788e9cd7186ca5d6b41912be","modified":1584317025000},{"_id":"themes/next/.git/objects/pack/pack-65ddbff0b3a65c4ce6b5c2d8d29c616c9f5d41bf.pack","hash":"e061ed3a9587775bf262e1e23f24cb21affd669b","modified":1593812506679},{"_id":"themes/next/.git/objects/pack/pack-785158cd93e60b45240880af6746ecf9206f5224.pack","hash":"3a0e5ded30498b35da3b9d791a6daed267fe1488","modified":1584317025000}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2018-02-08T08:13:23.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-02-08 00:13:23\n---\n","updated":"2020-05-25T23:14:55.042Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckgeu0hsk0000bktzzy6wyweg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-08T08:12:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-08 00:12:22\ntype: \"tags\"\n---\n","updated":"2020-05-25T23:14:55.042Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckgeu0hsq0002bktz5m8x3c83","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Gmail Information Extraction: From Juicer to Crusher","date":"2020-09-20T22:55:52.000Z","mathjax":true,"_content":"读完今年的paper指标后想找点有趣的东西，在vldb上闲逛时找到了一篇关于改进Gmail处理B2C邮件系统的paper，部分思路跟至今没读完的Google News(~~我是真的毫无强迫症~~)相似所以读得很愉快，遂顺便读了关于原本系统的paper。\n如同标题，原版叫Juicer，新版叫Crusher。Google的起名有时非常一言难尽。\n\n<!-- more -->\n笔记完全基于两篇paper：\n- Anatomy of a Privacy-Safe Large-Scale Information Extraction System Over Email\n- Online Template Induction for Machine Generated Emails\n\n## Problem Statement\n世界上>90%的邮件是机器生成的business-to-customer (B2C)邮件，包括账单、旅馆确认信、促销等等。这些邮件数量极多但基本是由固定的template生成的，Google想提取有用信息供自己的assisitive类产品使用，比如让Google Assistant能够回答账单什么时候要付之类的问题。\n\n## Challenges and Basic Ideas\n就像design principles总结的，设计难点是scalability/simplicity/safety。\n\nk-anonymity\n\n无论Juicer还是Crusher，都由三部分逻辑组成：\n1. template induction\n2. machine-learned rule generation\n3. online extraction\n\n\n## Juicer\n\n\n### Template Induction\nconflation/segmentation\n\n## Crusher\n一言以蔽之，Crusher的改进就是把template induction从offline挪到了online。\n\nstaged event-driven (SEDA)架构\n\n**Why not stream processing framework？**\n\n\n## Summary\n","source":"_drafts/juicer-crusher.md","raw":"---\ntitle: \"Gmail Information Extraction: From Juicer to Crusher\"\ndate: 2020-09-20 15:55:52\nmathjax: true\ntags:\n---\n读完今年的paper指标后想找点有趣的东西，在vldb上闲逛时找到了一篇关于改进Gmail处理B2C邮件系统的paper，部分思路跟至今没读完的Google News(~~我是真的毫无强迫症~~)相似所以读得很愉快，遂顺便读了关于原本系统的paper。\n如同标题，原版叫Juicer，新版叫Crusher。Google的起名有时非常一言难尽。\n\n<!-- more -->\n笔记完全基于两篇paper：\n- Anatomy of a Privacy-Safe Large-Scale Information Extraction System Over Email\n- Online Template Induction for Machine Generated Emails\n\n## Problem Statement\n世界上>90%的邮件是机器生成的business-to-customer (B2C)邮件，包括账单、旅馆确认信、促销等等。这些邮件数量极多但基本是由固定的template生成的，Google想提取有用信息供自己的assisitive类产品使用，比如让Google Assistant能够回答账单什么时候要付之类的问题。\n\n## Challenges and Basic Ideas\n就像design principles总结的，设计难点是scalability/simplicity/safety。\n\nk-anonymity\n\n无论Juicer还是Crusher，都由三部分逻辑组成：\n1. template induction\n2. machine-learned rule generation\n3. online extraction\n\n\n## Juicer\n\n\n### Template Induction\nconflation/segmentation\n\n## Crusher\n一言以蔽之，Crusher的改进就是把template induction从offline挪到了online。\n\nstaged event-driven (SEDA)架构\n\n**Why not stream processing framework？**\n\n\n## Summary\n","slug":"juicer-crusher","published":0,"updated":"2020-09-21T00:03:36.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgeu0hsm0001bktzt05xumd9","content":"<p>读完今年的paper指标后想找点有趣的东西，在vldb上闲逛时找到了一篇关于改进Gmail处理B2C邮件系统的paper，部分思路跟至今没读完的Google News(<del>我是真的毫无强迫症</del>)相似所以读得很愉快，遂顺便读了关于原本系统的paper。<br>如同标题，原版叫Juicer，新版叫Crusher。Google的起名有时非常一言难尽。</p>\n<a id=\"more\"></a>\n<p>笔记完全基于两篇paper：</p>\n<ul>\n<li>Anatomy of a Privacy-Safe Large-Scale Information Extraction System Over Email</li>\n<li>Online Template Induction for Machine Generated Emails</li>\n</ul>\n<h2 id=\"Problem-Statement\"><a href=\"#Problem-Statement\" class=\"headerlink\" title=\"Problem Statement\"></a>Problem Statement</h2><p>世界上&gt;90%的邮件是机器生成的business-to-customer (B2C)邮件，包括账单、旅馆确认信、促销等等。这些邮件数量极多但基本是由固定的template生成的，Google想提取有用信息供自己的assisitive类产品使用，比如让Google Assistant能够回答账单什么时候要付之类的问题。</p>\n<h2 id=\"Challenges-and-Basic-Ideas\"><a href=\"#Challenges-and-Basic-Ideas\" class=\"headerlink\" title=\"Challenges and Basic Ideas\"></a>Challenges and Basic Ideas</h2><p>就像design principles总结的，设计难点是scalability/simplicity/safety。</p>\n<p>k-anonymity</p>\n<p>无论Juicer还是Crusher，都由三部分逻辑组成：</p>\n<ol>\n<li>template induction</li>\n<li>machine-learned rule generation</li>\n<li>online extraction</li>\n</ol>\n<h2 id=\"Juicer\"><a href=\"#Juicer\" class=\"headerlink\" title=\"Juicer\"></a>Juicer</h2><h3 id=\"Template-Induction\"><a href=\"#Template-Induction\" class=\"headerlink\" title=\"Template Induction\"></a>Template Induction</h3><p>conflation/segmentation</p>\n<h2 id=\"Crusher\"><a href=\"#Crusher\" class=\"headerlink\" title=\"Crusher\"></a>Crusher</h2><p>一言以蔽之，Crusher的改进就是把template induction从offline挪到了online。</p>\n<p>staged event-driven (SEDA)架构</p>\n<p><strong>Why not stream processing framework？</strong></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2>","site":{"data":{}},"excerpt":"<p>读完今年的paper指标后想找点有趣的东西，在vldb上闲逛时找到了一篇关于改进Gmail处理B2C邮件系统的paper，部分思路跟至今没读完的Google News(<del>我是真的毫无强迫症</del>)相似所以读得很愉快，遂顺便读了关于原本系统的paper。<br>如同标题，原版叫Juicer，新版叫Crusher。Google的起名有时非常一言难尽。</p>","more":"<p>笔记完全基于两篇paper：</p>\n<ul>\n<li>Anatomy of a Privacy-Safe Large-Scale Information Extraction System Over Email</li>\n<li>Online Template Induction for Machine Generated Emails</li>\n</ul>\n<h2 id=\"Problem-Statement\"><a href=\"#Problem-Statement\" class=\"headerlink\" title=\"Problem Statement\"></a>Problem Statement</h2><p>世界上&gt;90%的邮件是机器生成的business-to-customer (B2C)邮件，包括账单、旅馆确认信、促销等等。这些邮件数量极多但基本是由固定的template生成的，Google想提取有用信息供自己的assisitive类产品使用，比如让Google Assistant能够回答账单什么时候要付之类的问题。</p>\n<h2 id=\"Challenges-and-Basic-Ideas\"><a href=\"#Challenges-and-Basic-Ideas\" class=\"headerlink\" title=\"Challenges and Basic Ideas\"></a>Challenges and Basic Ideas</h2><p>就像design principles总结的，设计难点是scalability/simplicity/safety。</p>\n<p>k-anonymity</p>\n<p>无论Juicer还是Crusher，都由三部分逻辑组成：</p>\n<ol>\n<li>template induction</li>\n<li>machine-learned rule generation</li>\n<li>online extraction</li>\n</ol>\n<h2 id=\"Juicer\"><a href=\"#Juicer\" class=\"headerlink\" title=\"Juicer\"></a>Juicer</h2><h3 id=\"Template-Induction\"><a href=\"#Template-Induction\" class=\"headerlink\" title=\"Template Induction\"></a>Template Induction</h3><p>conflation/segmentation</p>\n<h2 id=\"Crusher\"><a href=\"#Crusher\" class=\"headerlink\" title=\"Crusher\"></a>Crusher</h2><p>一言以蔽之，Crusher的改进就是把template induction从offline挪到了online。</p>\n<p>staged event-driven (SEDA)架构</p>\n<p><strong>Why not stream processing framework？</strong></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2>"},{"title":"M5 Forecasting Accuracy","date":"2020-07-03T06:13:40.000Z","mathjax":true,"_content":"\n最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/...），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。\n\n<!-- more -->\n\n记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。\n\n## 背景\n\n### 比赛介绍\n\n简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：\n\n- sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。\n- calendar.csv：每天的日期以及是不是节日等额外信息。\n- sell_prices.csv：各超市、各商品每天的价格。\n\n需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。\n\n比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。\n\n第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。\n\n### 软硬件条件\n\n为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。\n\n软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。\n\n## 思路和工具\n\n### Direct vs Recusive Prediction\n\n这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。\n\n{% asset_img importance.png %}\n\n但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：\n\n1.  一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。\n2. 一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。\n3. 分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。\n\n其中#1和#3是direct model，#2是recursive model。Pros & Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。\n\n### Model\n\n模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的~~（至少1000%才行）~~，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了`bagging_fraction`参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。\n\n我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：\n\n```python\n# Before training.\nlabel_encoders = {}\nfor col in CAT_FEATURES:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])\n    label_encoders[col] = le\n...\n# After training.\nfor col in CAT_FEATURES:\n    df[col] = label_encoders[col].inverse_transform(v[col])\n```\n\n而LightGBM只要在生成Dataset的时候声明一下：\n\n```python\ntrain_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)\n```\n\n值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。\n\n所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的[解答](https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216)，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。\n\n## 反思 & 规划\n\n其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。\n\n我自己学习的原则是\"go one layer deeper\"，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。","source":"_posts/m5-forecasting.md","raw":"---\ntitle: M5 Forecasting Accuracy\ndate: 2020-07-02 23:13:40\nmathjax: true\ntags:\n---\n\n最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/...），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。\n\n<!-- more -->\n\n记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。\n\n## 背景\n\n### 比赛介绍\n\n简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：\n\n- sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。\n- calendar.csv：每天的日期以及是不是节日等额外信息。\n- sell_prices.csv：各超市、各商品每天的价格。\n\n需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。\n\n比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。\n\n第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。\n\n### 软硬件条件\n\n为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。\n\n软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。\n\n## 思路和工具\n\n### Direct vs Recusive Prediction\n\n这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。\n\n{% asset_img importance.png %}\n\n但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：\n\n1.  一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。\n2. 一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。\n3. 分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。\n\n其中#1和#3是direct model，#2是recursive model。Pros & Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。\n\n### Model\n\n模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的~~（至少1000%才行）~~，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了`bagging_fraction`参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。\n\n我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：\n\n```python\n# Before training.\nlabel_encoders = {}\nfor col in CAT_FEATURES:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])\n    label_encoders[col] = le\n...\n# After training.\nfor col in CAT_FEATURES:\n    df[col] = label_encoders[col].inverse_transform(v[col])\n```\n\n而LightGBM只要在生成Dataset的时候声明一下：\n\n```python\ntrain_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)\n```\n\n值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。\n\n所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的[解答](https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216)，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。\n\n## 反思 & 规划\n\n其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。\n\n我自己学习的原则是\"go one layer deeper\"，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。","slug":"m5-forecasting","published":1,"updated":"2020-07-04T00:35:54.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgeu0hsr0003bktzulivryhe","content":"<p>最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/…），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。</p>\n<a id=\"more\"></a>\n<p>记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"比赛介绍\"><a href=\"#比赛介绍\" class=\"headerlink\" title=\"比赛介绍\"></a>比赛介绍</h3><p>简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：</p>\n<ul>\n<li>sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。</li>\n<li>calendar.csv：每天的日期以及是不是节日等额外信息。</li>\n<li>sell_prices.csv：各超市、各商品每天的价格。</li>\n</ul>\n<p>需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。</p>\n<p>比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。</p>\n<p>第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。</p>\n<h3 id=\"软硬件条件\"><a href=\"#软硬件条件\" class=\"headerlink\" title=\"软硬件条件\"></a>软硬件条件</h3><p>为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。</p>\n<p>软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。</p>\n<h2 id=\"思路和工具\"><a href=\"#思路和工具\" class=\"headerlink\" title=\"思路和工具\"></a>思路和工具</h2><h3 id=\"Direct-vs-Recusive-Prediction\"><a href=\"#Direct-vs-Recusive-Prediction\" class=\"headerlink\" title=\"Direct vs Recusive Prediction\"></a>Direct vs Recusive Prediction</h3><p>这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。</p>\n<img src=\"/2020/07/02/m5-forecasting/importance.png\">\n<p>但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：</p>\n<ol>\n<li>一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。</li>\n<li>一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。</li>\n<li>分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。</li>\n</ol>\n<p>其中#1和#3是direct model，#2是recursive model。Pros &amp; Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的<del>（至少1000%才行）</del>，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了<code>bagging_fraction</code>参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。</p>\n<p>我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Before training.</span></span><br><span class=\"line\">label_encoders = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    le = LabelEncoder()</span><br><span class=\"line\">    df[col] = le.fit_transform(df[col])</span><br><span class=\"line\">    label_encoders[col] = le</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># After training.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    df[col] = label_encoders[col].inverse_transform(v[col])</span><br></pre></td></tr></table></figure>\n<p>而LightGBM只要在生成Dataset的时候声明一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)</span><br></pre></td></tr></table></figure>\n<p>值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。</p>\n<p>所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的<a href=\"https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216\" target=\"_blank\" rel=\"noopener\">解答</a>，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。</p>\n<h2 id=\"反思-amp-规划\"><a href=\"#反思-amp-规划\" class=\"headerlink\" title=\"反思 &amp; 规划\"></a>反思 &amp; 规划</h2><p>其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。</p>\n<p>我自己学习的原则是”go one layer deeper”，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。</p>\n","site":{"data":{}},"excerpt":"<p>最近想复习一下python数据处理和机器学习库（pandas/numpy/sklearn/…），于是找了个Kaggle比赛实战。因为以复习为主，心理准备是打到前50%比一半的人好就不算耻辱下播，结果前30%算是超水平发挥了。一方面是之前朋友的建议，一方面是自己也觉得一个月断断续续投入了不少精力，还是有必要总结一下收获。</p>","more":"<p>记录方面分成几个部分，首先是背景——包括比赛介绍和我为什么选择这个比赛，然后是实现思路和工具，最后是对长期目标的反思和规划。当然实际过程中这几个部分不是严格的先后关系，说实话理解这个比赛的需求就有难度，我最开始的实现就是错误的，反过去重新理解要求后才有了正确的实现。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><h3 id=\"比赛介绍\"><a href=\"#比赛介绍\" class=\"headerlink\" title=\"比赛介绍\"></a>比赛介绍</h3><p>简单地说，Walmart提供了历史上各超市、各商品的每天销售量，希望预测之后一段时间的每天销售量。比赛提供了三个输入csv文件：</p>\n<ul>\n<li>sales_train_validation.csv / sales_train_evaluation.csv：历史上各超市、各商品的每天销售量，validation是第0-1913天，evaluation是第0-1941天——其实共同部分第0-1913天是一样的，只是id表示法不同，关于两个文件这点之后会吐槽。</li>\n<li>calendar.csv：每天的日期以及是不是节日等额外信息。</li>\n<li>sell_prices.csv：各超市、各商品每天的价格。</li>\n</ul>\n<p>需要的输出是一个submission.csv，是各超市、各商品在未来28天（第1942-1969天）的每天销售量。</p>\n<p>比赛本身值得吐槽的地方有两个。第一，真正评分用的函数是Walmart自己定义的WRMSSE，是一个形式非常复杂的多层加权时间序列误差，大致讲除了每个商品的原始时间序列外，把每个超市里同一类商品聚合也是一个时间序列——像这样定义了10+层的聚合顺序，WRMSSE则是以最近时间窗口内的销售量为权重，所有原始和聚合时间序列误差的加权和。虽然从业务角度勉强能够理解，但如此复杂的函数导致没有public kernel直接用它或者比较好的proxy作为loss function。即使不考虑比赛者希望用评分函数优化模型，我都有点好奇Walmart内部要如何优化这么复杂的metric。</p>\n<p>第二，比赛刚开始只放出了sales_train_validation.csv，public score是基于第1914-1941天的销售量，距离结束前一个月左右（我是这时候参加的）放出了sales_train_evaluation.csv，于是很多人直接提交了正确答案——很长时间排行榜上一大段队伍都是完美的score 0.0，堪称群魔乱舞。除此之外，把数据分成两个id表示法不同的文件放出，也导致了很多没什么意义的工作（处理两遍数据、id转换等）。</p>\n<h3 id=\"软硬件条件\"><a href=\"#软硬件条件\" class=\"headerlink\" title=\"软硬件条件\"></a>软硬件条件</h3><p>为什么选择这个比赛？一言以蔽之，数据size小。训练模型的硬件方面大致有三种选择，自己的机器，氪金的云服务商（AWS/GCP）和Kaggle的免费kernel服务。不引入分布式的话，机器的内存肯定是越大越好，我自己的笔记本是16GB memory，Kaggle的kernel是16GB memory每次最多连续用6小时，而图像处理类的比赛数据动辄TB起步，M5算是对不想氪金的人比较友好的了。</p>\n<p>软件方面倒没什么特别的blocker，记得以前机器学习库还是挺难安装配置的（编译Caffe时还看了不少博客），现在Kaggle的docker也好本地的conda也好，都是开箱即用。</p>\n<h2 id=\"思路和工具\"><a href=\"#思路和工具\" class=\"headerlink\" title=\"思路和工具\"></a>思路和工具</h2><h3 id=\"Direct-vs-Recusive-Prediction\"><a href=\"#Direct-vs-Recusive-Prediction\" class=\"headerlink\" title=\"Direct vs Recusive Prediction\"></a>Direct vs Recusive Prediction</h3><p>这里direct vs recursive指我们怎样进行多步（28天）的预测，是比model更high level的问题，决定了能选择哪些features。举例来说，几乎所有kernels选择的features里都有每个商品的rolling mean（某商品第X天前，Y天窗口内销售量的平均）。比如下图是LightGBM最后的各feature重要性，其中最重要的rmean_7_28就是7天前28天窗口内的平均销量，从直觉上也可以理解最近一段时间平均值的重要性。</p>\n<img src=\"/2020/07/02/m5-forecasting/importance.png\">\n<p>但是当预测未来第28天的时候，之前没有一天的销售量是已知的，要怎么办呢？至少有三种策略：</p>\n<ol>\n<li>一个模型，放弃rmean_7_28，只用较弱的rmean_28_28。</li>\n<li>一个模型，把模型输出再作为特征——把预测的天数当作那天的销售量，计算以后的rmean_7_28。</li>\n<li>分段模型，不同特征。比如分成4个模型，分别预测未来第0-7天、7-14天、14-21天和21-28天，这样第一个model可以用rmean_7_28，第二个model可以用rmean_14_28，以此类推。</li>\n</ol>\n<p>其中#1和#3是direct model，#2是recursive model。Pros &amp; Cons还是挺明显的，就不多赘述了。其实这里rmean_7_28也是一种折衷，比如更强大的rmean_0_7会更进一步放大模型误差。</p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>模型方面LightGBM用户压倒性的多。因为总体能用的features数量不多但有大量的categorical features，如果用线性模型那one-hot encoding内存就可以瞬间拉满了，所以tree-based models算是自然的选择。单棵决策树肯定是不够的<del>（至少1000%才行）</del>，用ensemble的话无非是基于bagging的random forest和基于boosting的GBDT方法（其实思想有混合，比如LightGBM提供了<code>bagging_fraction</code>参数）。我之前最熟悉的random forest是sklearn，GBDT只接触过XGBoost。稍微调查了一下之后发现，LightGBM和XGBoost算法类似，但是memory用量更少，所以中后期主要是LightGBM了（boosting另一巨头是CatBoost，不过似乎memory用量太大导致没人用）。</p>\n<p>我最开始写得prototype是sklearn的random forest，写得时候试图找用sklearn做baseline model的kernels做参考但是完全没有，实际写完就能理解sklearn对比下来实在太难用——同样是接受pandas dataframe，sklearn传categorical features需要人工用LabelEncoder做变换/反变换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Before training.</span></span><br><span class=\"line\">label_encoders = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    le = LabelEncoder()</span><br><span class=\"line\">    df[col] = le.fit_transform(df[col])</span><br><span class=\"line\">    label_encoders[col] = le</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># After training.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> CAT_FEATURES:</span><br><span class=\"line\">    df[col] = label_encoders[col].inverse_transform(v[col])</span><br></pre></td></tr></table></figure>\n<p>而LightGBM只要在生成Dataset的时候声明一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_set = lgb.Dataset(train[FEATURES], train[TARGET], categorical_feature = CAT_FEATURES)</span><br></pre></td></tr></table></figure>\n<p>值得一提，我自己过去的印象是Kaggle比赛主要是比谁更能肝更愿意花时间tuning，其实model performance差得比较多的时候，原因很可能是更简单的因素，比如数据量和使用的features。我在本地跑时为了内存和速度只用300天左右的数据，改features也好调参也好public score始终在0.65左右，放到kernel后用了1000天，瞬间到了0.56。</p>\n<p>所以比赛最大的难点之一反而是内存管理，能有效压缩内存才能用更多的天数和features训练。个人感觉LightGBM python库的内存处理有点问题，生成Dataset这一步memory用量超过了最后生成的Dataset，从kernel dashboard来看，最后的Dataset在6GB左右，但转换时中间结果能到10GB，直接后果是能用的数据量少（因为超过16GB kernel session就会被断）。当然也可以麻烦点分割数据——比如第4位的<a href=\"https://www.kaggle.com/c/m5-forecasting-accuracy/discussion/163216\" target=\"_blank\" rel=\"noopener\">解答</a>，就是把每个超市分开，各自训练四个分段模型预测未来四周，可以说是非常有工业界暴力之美了。</p>\n<h2 id=\"反思-amp-规划\"><a href=\"#反思-amp-规划\" class=\"headerlink\" title=\"反思 &amp; 规划\"></a>反思 &amp; 规划</h2><p>其实我断断续续地思考过这个问题：data science skills到底算不算需要培养的核心竞争力？我现阶段得出的答案是NO。这么讲倒不是否定data science的价值，而是我比起infra（其实ML frameworks也是一种infra轮子）更喜欢product；而对于产品来说，抛开人造的光环，data science和C++语法同样是工具，是解决问题的「工具」。不懂C++语法是无法动C++ codebase的，但也没必要达到人肉编译器每行代码都是best practice的境界。真正的核心竞争力是解决问题的「能力」以及更meta一层，发现问题的能力，这点其实Google job ladders写得挺好的——工程师的能力，就是在 complexity and ambiguity中产生impact的能力。</p>\n<p>我自己学习的原则是”go one layer deeper”，比实际使用的技术深入一层。举例来说，使用Spark的话其实只需要懂RDD接口，深入一层理解RDD的fault-tolerance模型可以更好理解应用场景（为什么Google的FlumeJava没有采用Spark这样的内存计算模型？）和怎样高效使用（何时最好persist一下？），但再进一步理解代码实现就没什么短期意义了。所以今后有空我同样也打算粗读一下XGBoost和LightGBM的论文，不管是聊天的谈资还是项目的trade-off都是有价值的。</p>"},{"title":"Guava Quick Notes","date":"2018-12-25T22:51:21.000Z","mathjax":true,"_content":"\n圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看[java8-tutorial](https://github.com/winterbe/java8-tutorial)，对Java的印象比~~试图~~用Java写Leetcode时好了许多，顺便看掉了Guava的文档。\nGuava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。\n\n<!-- more -->\n\n## Using/avoiding null\n\n这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：\n\n- null作为Set/Map的key -> 显示处理查询null的情况\n- null作为Map的value -> 用单独的Set记录value为null的key\n- null作为处理情形 -> 定义枚举值\n\n这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如`Map.get(key)`返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。\n\n`Optional<T>`是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。\n\n## Ordering\n\n文档中将`Ordering`形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。\n一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：\n\n```Java\nclass Book {\n  public String name;\n  public int year;\n}\n// Java 8 Comparator\nbooks.sort(Comparator.comparing((Book x) -> x.name)\n                .thenComparing((Book x) -> x.year));\n\n// Guava Ordering\nOrdering<Book> byName = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.name.compareTo(book2.name);\n  }\n};\nOrdering<Book> byYear = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.year - book2.year;\n  }\n};\n\nbooks.sort(byName.compound(byYear));\n```\n\n它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；`Ordering`这时可读性更好，而且每个`Ordering`可以作为组件用于以后组装新`Ordering`。\n\n## Immutable Collection\n\n个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：\n\n```java\nBook book1 = new Book(\"book 1\", 2018);\nBook book2 = new Book(\"book 2\", 2018);\nBook book3 = new Book(\"book 3\", 2018);\n\nImmutableList<Book> immutableBooks = ImmutableList.of(book1, book2);\nbook1.name = \"renamed book 1\";\nimmutableBooks.get(1).name = \"renamed book 2\";\nimmutableBooks.add(book3);\t// UnsupportedOperationException\n```\n\n套用[ImmutableList and unmodifiableList](https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab)的解释：\n> The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.\n\n```mermaid\ngraph LR\n\t\t\t\tsubgraph Books\n\t\t\t\tbook1-->book2\n\t\t\t\tend\n\t\t\t\tbook1-->Object[Book1 Object]\n\t\t\t\timmutableBooks-->book1\n```\n\n用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。\n这么解释`ImmutableList`还是合理的，而`UnmodifiableList`套了一层wrapper就称为不可变实在太甜。\n\n实现元素不可变的方法很多，做法之一是用[auto](https://github.com/google/auto)中的`@AutoValue`:\n\n```Java\n@AutoValue\nabstract class Book {\n    public abstract String name();\n    public abstract int year();\n    public static Book create(String name, int year) {\n        return new AutoValue_Book(name, year);\n    }\n}\n```\n文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。\n\n## Others\n\n- `PeekingIterator`实现了`peek()`\n- `Cache`类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到\n- `Range `完善了一般的`pair<int, int>`实现，避免开闭区间的假定问题\n","source":"_posts/guava-quick-notes.md","raw":"---\ntitle: Guava Quick Notes\ndate: 2018-12-25 14:51:21\nmathjax: true\ntags: 编程\n---\n\n圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看[java8-tutorial](https://github.com/winterbe/java8-tutorial)，对Java的印象比~~试图~~用Java写Leetcode时好了许多，顺便看掉了Guava的文档。\nGuava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。\n\n<!-- more -->\n\n## Using/avoiding null\n\n这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：\n\n- null作为Set/Map的key -> 显示处理查询null的情况\n- null作为Map的value -> 用单独的Set记录value为null的key\n- null作为处理情形 -> 定义枚举值\n\n这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如`Map.get(key)`返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。\n\n`Optional<T>`是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。\n\n## Ordering\n\n文档中将`Ordering`形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。\n一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：\n\n```Java\nclass Book {\n  public String name;\n  public int year;\n}\n// Java 8 Comparator\nbooks.sort(Comparator.comparing((Book x) -> x.name)\n                .thenComparing((Book x) -> x.year));\n\n// Guava Ordering\nOrdering<Book> byName = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.name.compareTo(book2.name);\n  }\n};\nOrdering<Book> byYear = new Ordering<Book>() {\n  @Override\n  public int compare(@Nullable Book book1, @Nullable Book book2) {\n    return book1.year - book2.year;\n  }\n};\n\nbooks.sort(byName.compound(byYear));\n```\n\n它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；`Ordering`这时可读性更好，而且每个`Ordering`可以作为组件用于以后组装新`Ordering`。\n\n## Immutable Collection\n\n个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：\n\n```java\nBook book1 = new Book(\"book 1\", 2018);\nBook book2 = new Book(\"book 2\", 2018);\nBook book3 = new Book(\"book 3\", 2018);\n\nImmutableList<Book> immutableBooks = ImmutableList.of(book1, book2);\nbook1.name = \"renamed book 1\";\nimmutableBooks.get(1).name = \"renamed book 2\";\nimmutableBooks.add(book3);\t// UnsupportedOperationException\n```\n\n套用[ImmutableList and unmodifiableList](https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab)的解释：\n> The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.\n\n```mermaid\ngraph LR\n\t\t\t\tsubgraph Books\n\t\t\t\tbook1-->book2\n\t\t\t\tend\n\t\t\t\tbook1-->Object[Book1 Object]\n\t\t\t\timmutableBooks-->book1\n```\n\n用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。\n这么解释`ImmutableList`还是合理的，而`UnmodifiableList`套了一层wrapper就称为不可变实在太甜。\n\n实现元素不可变的方法很多，做法之一是用[auto](https://github.com/google/auto)中的`@AutoValue`:\n\n```Java\n@AutoValue\nabstract class Book {\n    public abstract String name();\n    public abstract int year();\n    public static Book create(String name, int year) {\n        return new AutoValue_Book(name, year);\n    }\n}\n```\n文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。\n\n## Others\n\n- `PeekingIterator`实现了`peek()`\n- `Cache`类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到\n- `Range `完善了一般的`pair<int, int>`实现，避免开闭区间的假定问题\n","slug":"guava-quick-notes","published":1,"updated":"2020-10-17T19:45:21.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgeu0hss0004bktz2ag18t7y","content":"<p>圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看<a href=\"https://github.com/winterbe/java8-tutorial\" target=\"_blank\" rel=\"noopener\">java8-tutorial</a>，对Java的印象比<del>试图</del>用Java写Leetcode时好了许多，顺便看掉了Guava的文档。<br>Guava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。</p>\n<a id=\"more\"></a>\n<h2 id=\"Using-avoiding-null\"><a href=\"#Using-avoiding-null\" class=\"headerlink\" title=\"Using/avoiding null\"></a>Using/avoiding null</h2><p>这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：</p>\n<ul>\n<li>null作为Set/Map的key -&gt; 显示处理查询null的情况</li>\n<li>null作为Map的value -&gt; 用单独的Set记录value为null的key</li>\n<li>null作为处理情形 -&gt; 定义枚举值</li>\n</ul>\n<p>这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如<code>Map.get(key)</code>返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。</p>\n<p><code>Optional&lt;T&gt;</code>是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。</p>\n<h2 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h2><p>文档中将<code>Ordering</code>形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。<br>一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java 8 Comparator</span></span><br><span class=\"line\">books.sort(Comparator.comparing((Book x) -&gt; x.name)</span><br><span class=\"line\">                .thenComparing((Book x) -&gt; x.year));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Guava Ordering</span></span><br><span class=\"line\">Ordering&lt;Book&gt; byName = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.name.compareTo(book2.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Ordering&lt;Book&gt; byYear = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.year - book2.year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">books.sort(byName.compound(byYear));</span><br></pre></td></tr></table></figure>\n<p>它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；<code>Ordering</code>这时可读性更好，而且每个<code>Ordering</code>可以作为组件用于以后组装新<code>Ordering</code>。</p>\n<h2 id=\"Immutable-Collection\"><a href=\"#Immutable-Collection\" class=\"headerlink\" title=\"Immutable Collection\"></a>Immutable Collection</h2><p>个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book book1 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 1\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book2 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 2\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book3 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 3\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ImmutableList&lt;Book&gt; immutableBooks = ImmutableList.of(book1, book2);</span><br><span class=\"line\">book1.name = <span class=\"string\">\"renamed book 1\"</span>;</span><br><span class=\"line\">immutableBooks.get(<span class=\"number\">1</span>).name = <span class=\"string\">\"renamed book 2\"</span>;</span><br><span class=\"line\">immutableBooks.add(book3);\t<span class=\"comment\">// UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>\n<p>套用<a href=\"https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab\" target=\"_blank\" rel=\"noopener\">ImmutableList and unmodifiableList</a>的解释：</p>\n<blockquote>\n<p>The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\n                subgraph Books\n                book1-->book2\n                end\n                book1-->Object[Book1 Object]\n                immutableBooks-->book1</pre>\n\n<p>用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。<br>这么解释<code>ImmutableList</code>还是合理的，而<code>UnmodifiableList</code>套了一层wrapper就称为不可变实在太甜。</p>\n<p>实现元素不可变的方法很多，做法之一是用<a href=\"https://github.com/google/auto\" target=\"_blank\" rel=\"noopener\">auto</a>中的<code>@AutoValue</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoValue</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">year</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Book <span class=\"title\">create</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> year)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoValue_Book(name, year);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。</p>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><ul>\n<li><code>PeekingIterator</code>实现了<code>peek()</code></li>\n<li><code>Cache</code>类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到</li>\n<li><code>Range</code>完善了一般的<code>pair&lt;int, int&gt;</code>实现，避免开闭区间的假定问题</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>圣诞节前用Guava和内部框架写数据处理任务，因为不熟悉Java吃了不少苦头。假期宅家里偶然看<a href=\"https://github.com/winterbe/java8-tutorial\" target=\"_blank\" rel=\"noopener\">java8-tutorial</a>，对Java的印象比<del>试图</del>用Java写Leetcode时好了许多，顺便看掉了Guava的文档。<br>Guava已有近十年历史，而且是以数据结构为主的工具库，读起来不那么惊艳，但还是有很多思路值得借鉴。</p>","more":"<h2 id=\"Using-avoiding-null\"><a href=\"#Using-avoiding-null\" class=\"headerlink\" title=\"Using/avoiding null\"></a>Using/avoiding null</h2><p>这篇很精彩，主要是举例说明null的歧义性和怎样避免用null。给的几个例子看得心虚：</p>\n<ul>\n<li>null作为Set/Map的key -&gt; 显示处理查询null的情况</li>\n<li>null作为Map的value -&gt; 用单独的Set记录value为null的key</li>\n<li>null作为处理情形 -&gt; 定义枚举值</li>\n</ul>\n<p>这些方法的确能压缩代码行数，但增加了使用者的思维负担，比如<code>Map.get(key)</code>返回null时可能是key不存在，也可能是key对应的value就是null。现在想增加readability的重点之一就是消除自认为显然的假定，short$\\neq$simple。</p>\n<p><code>Optional&lt;T&gt;</code>是大势所趋。昨天和朋友聊RESTful的意义，r结论是很多封装是为了让编程时更不容易出错(hard to misuse)，深以为然。</p>\n<h2 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h2><p>文档中将<code>Ordering</code>形容为”fluent comparator“，将其和Java 8中的Comparator对比还是挺有意思的。<br>一个常见需求是多条件排序，假设有一个Book类的List要先按name排序，后按year排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java 8 Comparator</span></span><br><span class=\"line\">books.sort(Comparator.comparing((Book x) -&gt; x.name)</span><br><span class=\"line\">                .thenComparing((Book x) -&gt; x.year));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Guava Ordering</span></span><br><span class=\"line\">Ordering&lt;Book&gt; byName = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.name.compareTo(book2.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Ordering&lt;Book&gt; byYear = <span class=\"keyword\">new</span> Ordering&lt;Book&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(@Nullable Book book1, @Nullable Book book2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> book1.year - book2.year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">books.sort(byName.compound(byYear));</span><br></pre></td></tr></table></figure>\n<p>它们都提供了chaining，做法各有优劣。每个排序条件很简单时comparing/thenComparing很爽，但假设Book的name可能有书名号《》，比较的时候要先去掉，那comparing/thenComparing就没这么干净了；<code>Ordering</code>这时可读性更好，而且每个<code>Ordering</code>可以作为组件用于以后组装新<code>Ordering</code>。</p>\n<h2 id=\"Immutable-Collection\"><a href=\"#Immutable-Collection\" class=\"headerlink\" title=\"Immutable Collection\"></a>Immutable Collection</h2><p>个人看法这里immurtable的用词有点误导，当描述一个集合不可变时，直觉是里面的所有元素也不可变，但Guava的Immutable Collection中元素本身是可以修改的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book book1 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 1\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book2 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 2\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\">Book book3 = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"book 3\"</span>, <span class=\"number\">2018</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ImmutableList&lt;Book&gt; immutableBooks = ImmutableList.of(book1, book2);</span><br><span class=\"line\">book1.name = <span class=\"string\">\"renamed book 1\"</span>;</span><br><span class=\"line\">immutableBooks.get(<span class=\"number\">1</span>).name = <span class=\"string\">\"renamed book 2\"</span>;</span><br><span class=\"line\">immutableBooks.add(book3);\t<span class=\"comment\">// UnsupportedOperationException</span></span><br></pre></td></tr></table></figure>\n<p>套用<a href=\"https://stackoverflow.com/questions/2185789/what-is-the-difference-between-googles-immutablelist-and-collections-unmodifiab\" target=\"_blank\" rel=\"noopener\">ImmutableList and unmodifiableList</a>的解释：</p>\n<blockquote>\n<p>The immutability is only applied to the amount and references of the objects in the Collection, and does not address the mutability of objects you put in the Collection.</p>\n</blockquote>\n<pre class=\"mermaid\">graph LR\n                subgraph Books\n                book1-->book2\n                end\n                book1-->Object[Book1 Object]\n                immutableBooks-->book1</pre>\n\n<p>用C++解释的话图中book1和book2都是const指针，无法让book1指向别的Book对象，但却可以通过book1修改其指向的对象；Guava的Immutable Collection相当于保存了固定数量、固定值的const指针。<br>这么解释<code>ImmutableList</code>还是合理的，而<code>UnmodifiableList</code>套了一层wrapper就称为不可变实在太甜。</p>\n<p>实现元素不可变的方法很多，做法之一是用<a href=\"https://github.com/google/auto\" target=\"_blank\" rel=\"noopener\">auto</a>中的<code>@AutoValue</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoValue</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">year</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Book <span class=\"title\">create</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> year)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoValue_Book(name, year);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文档里提到Immutable Collection的优点，一个是thread safety(不完全正确，元素可能可变)，一个是更加 memory efficient，比如Map不需要可变操作的话可以用有序数组代替树结构。</p>\n<h2 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h2><ul>\n<li><code>PeekingIterator</code>实现了<code>peek()</code></li>\n<li><code>Cache</code>类的几种eviction方法里基于size和time常见，reference-based eviction第一次见到</li>\n<li><code>Range</code>完善了一般的<code>pair&lt;int, int&gt;</code>实现，避免开闭区间的假定问题</li>\n</ul>"},{"title":"关于不用AWS的我去了考AWS证书这件事","date":"2020-07-19T00:23:55.000Z","mathjax":true,"_content":"\n时隔两周的生存确认，今日もかわいい。\n这周五考了AWS最基本的证书Cloud Practitioner，这篇比起Kaggle那次正经的总结，倒不如说是色々な吐槽合集。\n\n<!-- more -->\n\n会去考这个证书除了新冠在家待到自闭之外，今年读了很多system design论文后想找方法实践学到的理念，但自己造轮子需要写很多代码的话很麻烦~~身为程序员的问题发言~~。考虑到业界很多公司会用云而不是自己的infrastructure，那学习怎么用各种cloud services作为积木，搭建要考虑availability/consistency/scalability/...种种需求的应用就是一举多得的练习。\n\nAWS和GCP都有自己的证书系列，而GCP是我工作的技术栈之一，没选择GCP主要是因为AWS一项考试100刀，GCP一项考试200刀，所以花同样的钱可以考两张AWS证书~~（比起吐槽役已经是在装傻了）~~。最开始想考的是Solutions Architect Associate，顾名思义更像是云服务架构师，但是我过去基本没用过AWS，还是一步个一脚印先获得些正反馈毕竟好。\n\nCloud Practitioner虽然是最基本的证书，但也不是毫无准备就能通过的（官方推荐是6个月经验）。我是读了两遍AWS Certified Cloud Practitioner Study Guide，一遍粗读一遍结合练习题精读。备考的话还是推荐看些书，倒不是做题家思维，而是有些重要知识点作为开发者基本是不会碰到的。举个例子，dedicated host指的的是可以指定一台AWS物理服务器专门用来跑你的EC2，如果应用授权是per-server license的话，就必须用dedicated host。这个知识点当然很重要——实际用到的时不知道的话会很麻烦，但感觉相当多的个人/团队根本不会遇到（查了一下主要例子是Microsoft SQL Server系列）。另一方面，有些考点就是要背，比如某个support plan能做什么（仿佛是培养推销员）。\n\n其实比较“硬”的技术知识我大多是靠GCP经验类比和之前读的理论知识，比如GCS对S3，比如Dynamo的数据模型，准备这个证书对我最大的收获是对AWS的整体认识和具体名词，现在看Solutions Architect Associate的场景就明白在说些什么了——之前的感想是“Glacier是什么？Storage Gateway又是什么？”。\n\n需要承认的是AWS的storytelling能力是真的很强，[The 5 Pillars of the AWS Well-Architected Framework](https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/)里没有一条是传统意义上的技术问题：\n\n- Operational Excellence\n- Security\n- Reliability\n- Performance Efficiency\n- Cost Optimization\n\n毕业后不知不觉在在湾区工作了两年，就算跳槽也不算是new grad了。之前晚上失眠的时候发现自己难以回忆起2019年的很多细节，但更早的记忆倒很清楚。去年也不算在自暴自弃，只是规划和总结都做得太少了。要纠结自己有没有成为更好的人的话，还是需要经常记录「此刻」自己是个怎样的人。","source":"_posts/aws-cloud-practitioner.md","raw":"---\ntitle: 关于不用AWS的我去了考AWS证书这件事\ndate: 2020-07-18 17:23:55\nmathjax: true\ntags:\n- 编程\n- 架构\n- AWS\n---\n\n时隔两周的生存确认，今日もかわいい。\n这周五考了AWS最基本的证书Cloud Practitioner，这篇比起Kaggle那次正经的总结，倒不如说是色々な吐槽合集。\n\n<!-- more -->\n\n会去考这个证书除了新冠在家待到自闭之外，今年读了很多system design论文后想找方法实践学到的理念，但自己造轮子需要写很多代码的话很麻烦~~身为程序员的问题发言~~。考虑到业界很多公司会用云而不是自己的infrastructure，那学习怎么用各种cloud services作为积木，搭建要考虑availability/consistency/scalability/...种种需求的应用就是一举多得的练习。\n\nAWS和GCP都有自己的证书系列，而GCP是我工作的技术栈之一，没选择GCP主要是因为AWS一项考试100刀，GCP一项考试200刀，所以花同样的钱可以考两张AWS证书~~（比起吐槽役已经是在装傻了）~~。最开始想考的是Solutions Architect Associate，顾名思义更像是云服务架构师，但是我过去基本没用过AWS，还是一步个一脚印先获得些正反馈毕竟好。\n\nCloud Practitioner虽然是最基本的证书，但也不是毫无准备就能通过的（官方推荐是6个月经验）。我是读了两遍AWS Certified Cloud Practitioner Study Guide，一遍粗读一遍结合练习题精读。备考的话还是推荐看些书，倒不是做题家思维，而是有些重要知识点作为开发者基本是不会碰到的。举个例子，dedicated host指的的是可以指定一台AWS物理服务器专门用来跑你的EC2，如果应用授权是per-server license的话，就必须用dedicated host。这个知识点当然很重要——实际用到的时不知道的话会很麻烦，但感觉相当多的个人/团队根本不会遇到（查了一下主要例子是Microsoft SQL Server系列）。另一方面，有些考点就是要背，比如某个support plan能做什么（仿佛是培养推销员）。\n\n其实比较“硬”的技术知识我大多是靠GCP经验类比和之前读的理论知识，比如GCS对S3，比如Dynamo的数据模型，准备这个证书对我最大的收获是对AWS的整体认识和具体名词，现在看Solutions Architect Associate的场景就明白在说些什么了——之前的感想是“Glacier是什么？Storage Gateway又是什么？”。\n\n需要承认的是AWS的storytelling能力是真的很强，[The 5 Pillars of the AWS Well-Architected Framework](https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/)里没有一条是传统意义上的技术问题：\n\n- Operational Excellence\n- Security\n- Reliability\n- Performance Efficiency\n- Cost Optimization\n\n毕业后不知不觉在在湾区工作了两年，就算跳槽也不算是new grad了。之前晚上失眠的时候发现自己难以回忆起2019年的很多细节，但更早的记忆倒很清楚。去年也不算在自暴自弃，只是规划和总结都做得太少了。要纠结自己有没有成为更好的人的话，还是需要经常记录「此刻」自己是个怎样的人。","slug":"aws-cloud-practitioner","published":1,"updated":"2020-10-17T19:46:08.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgeu0hsu0005bktz8ukhbo1n","content":"<p>时隔两周的生存确认，今日もかわいい。<br>这周五考了AWS最基本的证书Cloud Practitioner，这篇比起Kaggle那次正经的总结，倒不如说是色々な吐槽合集。</p>\n<a id=\"more\"></a>\n<p>会去考这个证书除了新冠在家待到自闭之外，今年读了很多system design论文后想找方法实践学到的理念，但自己造轮子需要写很多代码的话很麻烦<del>身为程序员的问题发言</del>。考虑到业界很多公司会用云而不是自己的infrastructure，那学习怎么用各种cloud services作为积木，搭建要考虑availability/consistency/scalability/…种种需求的应用就是一举多得的练习。</p>\n<p>AWS和GCP都有自己的证书系列，而GCP是我工作的技术栈之一，没选择GCP主要是因为AWS一项考试100刀，GCP一项考试200刀，所以花同样的钱可以考两张AWS证书<del>（比起吐槽役已经是在装傻了）</del>。最开始想考的是Solutions Architect Associate，顾名思义更像是云服务架构师，但是我过去基本没用过AWS，还是一步个一脚印先获得些正反馈毕竟好。</p>\n<p>Cloud Practitioner虽然是最基本的证书，但也不是毫无准备就能通过的（官方推荐是6个月经验）。我是读了两遍AWS Certified Cloud Practitioner Study Guide，一遍粗读一遍结合练习题精读。备考的话还是推荐看些书，倒不是做题家思维，而是有些重要知识点作为开发者基本是不会碰到的。举个例子，dedicated host指的的是可以指定一台AWS物理服务器专门用来跑你的EC2，如果应用授权是per-server license的话，就必须用dedicated host。这个知识点当然很重要——实际用到的时不知道的话会很麻烦，但感觉相当多的个人/团队根本不会遇到（查了一下主要例子是Microsoft SQL Server系列）。另一方面，有些考点就是要背，比如某个support plan能做什么（仿佛是培养推销员）。</p>\n<p>其实比较“硬”的技术知识我大多是靠GCP经验类比和之前读的理论知识，比如GCS对S3，比如Dynamo的数据模型，准备这个证书对我最大的收获是对AWS的整体认识和具体名词，现在看Solutions Architect Associate的场景就明白在说些什么了——之前的感想是“Glacier是什么？Storage Gateway又是什么？”。</p>\n<p>需要承认的是AWS的storytelling能力是真的很强，<a href=\"https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/\" target=\"_blank\" rel=\"noopener\">The 5 Pillars of the AWS Well-Architected Framework</a>里没有一条是传统意义上的技术问题：</p>\n<ul>\n<li>Operational Excellence</li>\n<li>Security</li>\n<li>Reliability</li>\n<li>Performance Efficiency</li>\n<li>Cost Optimization</li>\n</ul>\n<p>毕业后不知不觉在在湾区工作了两年，就算跳槽也不算是new grad了。之前晚上失眠的时候发现自己难以回忆起2019年的很多细节，但更早的记忆倒很清楚。去年也不算在自暴自弃，只是规划和总结都做得太少了。要纠结自己有没有成为更好的人的话，还是需要经常记录「此刻」自己是个怎样的人。</p>\n","site":{"data":{}},"excerpt":"<p>时隔两周的生存确认，今日もかわいい。<br>这周五考了AWS最基本的证书Cloud Practitioner，这篇比起Kaggle那次正经的总结，倒不如说是色々な吐槽合集。</p>","more":"<p>会去考这个证书除了新冠在家待到自闭之外，今年读了很多system design论文后想找方法实践学到的理念，但自己造轮子需要写很多代码的话很麻烦<del>身为程序员的问题发言</del>。考虑到业界很多公司会用云而不是自己的infrastructure，那学习怎么用各种cloud services作为积木，搭建要考虑availability/consistency/scalability/…种种需求的应用就是一举多得的练习。</p>\n<p>AWS和GCP都有自己的证书系列，而GCP是我工作的技术栈之一，没选择GCP主要是因为AWS一项考试100刀，GCP一项考试200刀，所以花同样的钱可以考两张AWS证书<del>（比起吐槽役已经是在装傻了）</del>。最开始想考的是Solutions Architect Associate，顾名思义更像是云服务架构师，但是我过去基本没用过AWS，还是一步个一脚印先获得些正反馈毕竟好。</p>\n<p>Cloud Practitioner虽然是最基本的证书，但也不是毫无准备就能通过的（官方推荐是6个月经验）。我是读了两遍AWS Certified Cloud Practitioner Study Guide，一遍粗读一遍结合练习题精读。备考的话还是推荐看些书，倒不是做题家思维，而是有些重要知识点作为开发者基本是不会碰到的。举个例子，dedicated host指的的是可以指定一台AWS物理服务器专门用来跑你的EC2，如果应用授权是per-server license的话，就必须用dedicated host。这个知识点当然很重要——实际用到的时不知道的话会很麻烦，但感觉相当多的个人/团队根本不会遇到（查了一下主要例子是Microsoft SQL Server系列）。另一方面，有些考点就是要背，比如某个support plan能做什么（仿佛是培养推销员）。</p>\n<p>其实比较“硬”的技术知识我大多是靠GCP经验类比和之前读的理论知识，比如GCS对S3，比如Dynamo的数据模型，准备这个证书对我最大的收获是对AWS的整体认识和具体名词，现在看Solutions Architect Associate的场景就明白在说些什么了——之前的感想是“Glacier是什么？Storage Gateway又是什么？”。</p>\n<p>需要承认的是AWS的storytelling能力是真的很强，<a href=\"https://aws.amazon.com/blogs/apn/the-5-pillars-of-the-aws-well-architected-framework/\" target=\"_blank\" rel=\"noopener\">The 5 Pillars of the AWS Well-Architected Framework</a>里没有一条是传统意义上的技术问题：</p>\n<ul>\n<li>Operational Excellence</li>\n<li>Security</li>\n<li>Reliability</li>\n<li>Performance Efficiency</li>\n<li>Cost Optimization</li>\n</ul>\n<p>毕业后不知不觉在在湾区工作了两年，就算跳槽也不算是new grad了。之前晚上失眠的时候发现自己难以回忆起2019年的很多细节，但更早的记忆倒很清楚。去年也不算在自暴自弃，只是规划和总结都做得太少了。要纠结自己有没有成为更好的人的话，还是需要经常记录「此刻」自己是个怎样的人。</p>"},{"title":"My 2018","date":"2018-12-30T20:40:31.000Z","_content":"\n\n年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。\n\n<!-- more -->\n\n## 工作\n\n我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。\n十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。\n\n### Golang\n\nGolang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。\n恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(`goroutine`/`channel`)，但不支持重载和泛型（`interface{}`基本就是`void*`）。\n\n### Spark\n\n这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。\nYARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。\n\n业务相关和内部工具不便记录，在此不表。\n\n### Personal\n\n除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有*Head First Design Pattern*和*HTTP: The Definitive Guide*(临时恶补或读了几章的书就不好意思列出来了)。\n今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。\n\n---\n\n本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：\n> “如果有人比我厉害，我怎么努力都捡不到年糕呢？”\n> “那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”\n\n## 生活\n### 番剧\n\n2018年对我影响最大的番剧(从低到高)：\n*Darling in the Franxx*，*少女歌剧*，*假面骑士Build*，*非自然死亡*，*Zombieland Saga*\n有国家队出现说明影响是褒贬兼有~~(虽然不算PTSD)~~，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：\n\n> “现在开始你就是我的darling了！”\n> “无法触及，因而耀眼。”\n> “既然如此，答案就只有一个了！”\n> “死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”\n> “偶像之道在于悟彻死亡。”\n\n2018始于Franxx，终于Franchouchou~~我就等着买昭和偶像黏土小人了~~。\n\n### 旅行\n\n不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。\n这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。\n\n### 其它\n\n9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。\n开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。\n买BiliBili，Facebook和Apple股票亏了不少钱。\n夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了~~玩还是要一鼓作气~~。\n\n## 新年计划\n\n- 提升工作中非技术能力，总结/交涉/~~甩锅/~~etc\n- 继续夯实CS基础\n- 精读一些system design和deep learning方面的paper\n- 学会开车\n- 养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)\n- 每2~3个月旅行一次\n\n> 就这样持续前行，今夜也将留下独自一人笔直的足迹。\n","source":"_posts/my-2018.md","raw":"---\ntitle: My 2018\ndate: 2018-12-30 12:40:31\ntags: 杂谈\n---\n\n\n年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。\n\n<!-- more -->\n\n## 工作\n\n我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。\n十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。\n\n### Golang\n\nGolang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。\n恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(`goroutine`/`channel`)，但不支持重载和泛型（`interface{}`基本就是`void*`）。\n\n### Spark\n\n这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。\nYARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。\n\n业务相关和内部工具不便记录，在此不表。\n\n### Personal\n\n除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有*Head First Design Pattern*和*HTTP: The Definitive Guide*(临时恶补或读了几章的书就不好意思列出来了)。\n今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。\n\n---\n\n本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：\n> “如果有人比我厉害，我怎么努力都捡不到年糕呢？”\n> “那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”\n\n## 生活\n### 番剧\n\n2018年对我影响最大的番剧(从低到高)：\n*Darling in the Franxx*，*少女歌剧*，*假面骑士Build*，*非自然死亡*，*Zombieland Saga*\n有国家队出现说明影响是褒贬兼有~~(虽然不算PTSD)~~，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：\n\n> “现在开始你就是我的darling了！”\n> “无法触及，因而耀眼。”\n> “既然如此，答案就只有一个了！”\n> “死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”\n> “偶像之道在于悟彻死亡。”\n\n2018始于Franxx，终于Franchouchou~~我就等着买昭和偶像黏土小人了~~。\n\n### 旅行\n\n不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。\n这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。\n\n### 其它\n\n9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。\n开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。\n买BiliBili，Facebook和Apple股票亏了不少钱。\n夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了~~玩还是要一鼓作气~~。\n\n## 新年计划\n\n- 提升工作中非技术能力，总结/交涉/~~甩锅/~~etc\n- 继续夯实CS基础\n- 精读一些system design和deep learning方面的paper\n- 学会开车\n- 养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)\n- 每2~3个月旅行一次\n\n> 就这样持续前行，今夜也将留下独自一人笔直的足迹。\n","slug":"my-2018","published":1,"updated":"2020-10-17T19:42:07.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgeu0hsw0006bktzm0gtog19","content":"<p>年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。</p>\n<a id=\"more\"></a>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。<br>十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。</p>\n<h3 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h3><p>Golang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。<br>恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(<code>goroutine</code>/<code>channel</code>)，但不支持重载和泛型（<code>interface{}</code>基本就是<code>void*</code>）。</p>\n<h3 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h3><p>这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。<br>YARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。</p>\n<p>业务相关和内部工具不便记录，在此不表。</p>\n<h3 id=\"Personal\"><a href=\"#Personal\" class=\"headerlink\" title=\"Personal\"></a>Personal</h3><p>除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有<em>Head First Design Pattern</em>和<em>HTTP: The Definitive Guide</em>(临时恶补或读了几章的书就不好意思列出来了)。<br>今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。</p>\n<hr>\n<p>本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：</p>\n<blockquote>\n<p>“如果有人比我厉害，我怎么努力都捡不到年糕呢？”<br>“那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h3 id=\"番剧\"><a href=\"#番剧\" class=\"headerlink\" title=\"番剧\"></a>番剧</h3><p>2018年对我影响最大的番剧(从低到高)：<br><em>Darling in the Franxx</em>，<em>少女歌剧</em>，<em>假面骑士Build</em>，<em>非自然死亡</em>，<em>Zombieland Saga</em><br>有国家队出现说明影响是褒贬兼有<del>(虽然不算PTSD)</del>，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：</p>\n<blockquote>\n<p>“现在开始你就是我的darling了！”<br>“无法触及，因而耀眼。”<br>“既然如此，答案就只有一个了！”<br>“死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”<br>“偶像之道在于悟彻死亡。”</p>\n</blockquote>\n<p>2018始于Franxx，终于Franchouchou<del>我就等着买昭和偶像黏土小人了</del>。</p>\n<h3 id=\"旅行\"><a href=\"#旅行\" class=\"headerlink\" title=\"旅行\"></a>旅行</h3><p>不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。<br>这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。<br>开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。<br>买BiliBili，Facebook和Apple股票亏了不少钱。<br>夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了<del>玩还是要一鼓作气</del>。</p>\n<h2 id=\"新年计划\"><a href=\"#新年计划\" class=\"headerlink\" title=\"新年计划\"></a>新年计划</h2><ul>\n<li>提升工作中非技术能力，总结/交涉/<del>甩锅/</del>etc</li>\n<li>继续夯实CS基础</li>\n<li>精读一些system design和deep learning方面的paper</li>\n<li>学会开车</li>\n<li>养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)</li>\n<li>每2~3个月旅行一次</li>\n</ul>\n<blockquote>\n<p>就这样持续前行，今夜也将留下独自一人笔直的足迹。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>年末在Amazon Rentals上重温哈利波特，想起知乎上的说法“火焰杯是童年的最后余晖，凤凰社则是冰冷的成人世界轰然洞开”。2018年对我没那么夸张，但也是从学生到社畜的转变。3月毕业，6月入职，觉得还没在Mountain View住多久，半年时间就过去了。</p>","more":"<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>我的组属于Ads Measurement，内容简单讲是为advertiser测量广告带来的收入，实际干的活偏backend/infrastructure。业务本身还算有前景，但落实到具体小组，客气的讲法是“管理和技术都需要改进”。<br>十月某天回家内心难受到在地板上躺了很久，真要叙述各种事件能单独成篇(实际上现在还觉得反胃)，但吐槽雇主不厚道，这里还是把重点放在学到的东西上。</p>\n<h3 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h3><p>Golang一方面是自己学，最后一学期只上一门课，无聊写掉了MIT的6.824，用Raft实现key-value store；另一方面是工作用，主要是操作Google Cloud模块(Bucket, Pub/Sub等)和Kubernetes集群。<br>恰好之前做IOS开发的朋友给科普Objective-C的执行模式，也可能我不是语言厨，Golang给我的印象是”朴素“。学习简单(25个关键词)，并发支持好(<code>goroutine</code>/<code>channel</code>)，但不支持重载和泛型（<code>interface{}</code>基本就是<code>void*</code>）。</p>\n<h3 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h3><p>这点也挺感慨的，学到最多东西的居然是一个作废的项目。除配置HDFS、Hadoop、YARN、Spark和写相关代码，因为涉及安全需要考虑系统各方面，仔细读了论文和不少博客，甚至有碰到sticker bit之类的Linux进程权限问题(算是半路转CS基础不牢吃的亏)。<br>YARN的架构我还是很喜欢的，ResourceManager和NodeManager维护集群，ApplicationManager管理应用(如一个运行的Spark程序)，非常简单和干净。跟经理1:1时聊到怎么算在项目中展示能力，经理的回答是问题要足够复杂，而解决方案则越简单越好。从这个意义上学习这些系统的经验都值得记录(新年挖坑)。</p>\n<p>业务相关和内部工具不便记录，在此不表。</p>\n<h3 id=\"Personal\"><a href=\"#Personal\" class=\"headerlink\" title=\"Personal\"></a>Personal</h3><p>除课程项目(XQuery Processor，低仿Dropbox)外，最有收获的一个是前面提到的Raft，另一个是简单正则表达式引擎。周期性地写几道Leetcode水平不至于退化太多。完整读的书有<em>Head First Design Pattern</em>和<em>HTTP: The Definitive Guide</em>(临时恶补或读了几章的书就不好意思列出来了)。<br>今年自学这方面最多打及格，其实我通常下班后不刻意挤也有一到两小时状态较好的空闲时间，另一方面思考和构造能让我心情变好，所以躺在地板上难过是收益极低的行为(当然对那时的自己有站着说话不腰疼之嫌)。</p>\n<hr>\n<p>本来想写点作为社畜非技术方面的工作总结，比如怎么判断project的impact性价比，怎么通过1:1表现自己，但这些还在思考和探索中，就不留下黑历史了。工作方面用元气囝仔里捡年糕的对话做结语吧：</p>\n<blockquote>\n<p>“如果有人比我厉害，我怎么努力都捡不到年糕呢？”<br>“那就请他先来吧，然后瞄准更大的年糕，就这样不放弃谦让和捡拾。”</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><h3 id=\"番剧\"><a href=\"#番剧\" class=\"headerlink\" title=\"番剧\"></a>番剧</h3><p>2018年对我影响最大的番剧(从低到高)：<br><em>Darling in the Franxx</em>，<em>少女歌剧</em>，<em>假面骑士Build</em>，<em>非自然死亡</em>，<em>Zombieland Saga</em><br>有国家队出现说明影响是褒贬兼有<del>(虽然不算PTSD)</del>，我看片是自得其乐边看边截图twitter吐槽，不会特别写评论的类型，就记录下名台词吧：</p>\n<blockquote>\n<p>“现在开始你就是我的darling了！”<br>“无法触及，因而耀眼。”<br>“既然如此，答案就只有一个了！”<br>“死去的人只是碰巧死去，而活着的我们也只是碰巧活着罢了。”<br>“偶像之道在于悟彻死亡。”</p>\n</blockquote>\n<p>2018始于Franxx，终于Franchouchou<del>我就等着买昭和偶像黏土小人了</del>。</p>\n<h3 id=\"旅行\"><a href=\"#旅行\" class=\"headerlink\" title=\"旅行\"></a>旅行</h3><p>不算在湾区内玩的话(以前吐槽过Mountain View到San Francisco相当于在上海从浦东到浦西)，今年比较重要的几次旅行，7月份去Los Angeles的Anime Expo，感恩节去Seattle，12月初去Austin。<br>这几次规划得都有不成熟，事后想去Anime Expo居然看天狼首映简直是浪费钱，Seattle因为天气原因没滑雪，Austin更是因为陪朋友看房来去匆匆，但这些都是不错的经历。旅行的意义，大概是提醒自己世界如此丰富吧。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>9月去体检量血压时收缩压达到130，虽然医生安慰我可能是white coat syndrome，但还是要注意。<br>开了几张Amex和Chase的信用卡，Discover给的额度已经高于月薪了(扶额)。<br>买BiliBili，Facebook和Apple股票亏了不少钱。<br>夏天把纯白拼图拼了2/3，某天突然意识到“我在干什么沙雕事”把拼图收起来了<del>玩还是要一鼓作气</del>。</p>\n<h2 id=\"新年计划\"><a href=\"#新年计划\" class=\"headerlink\" title=\"新年计划\"></a>新年计划</h2><ul>\n<li>提升工作中非技术能力，总结/交涉/<del>甩锅/</del>etc</li>\n<li>继续夯实CS基础</li>\n<li>精读一些system design和deep learning方面的paper</li>\n<li>学会开车</li>\n<li>养成慢跑和瑜伽的习惯(至少做到医生建议的每周1小时出汗程度的运动)</li>\n<li>每2~3个月旅行一次</li>\n</ul>\n<blockquote>\n<p>就这样持续前行，今夜也将留下独自一人笔直的足迹。</p>\n</blockquote>"},{"title":"中秋杂谈","date":"2020-10-17T19:39:41.000Z","_content":"中秋已经过去一段时间了，但时节很适合作为阶段的period，姑且当回标题党。\n近况简单总结，从夏末开始因为工作和生活问题陷入了长时间的低潮，直到近两周才慢慢恢复，原因一方面是通过努力解决直接困扰我的问题，还有做了许多其它事情收获了各种各样的经历。\n<!-- more -->\n\n低潮的原因不是来自外界，就算对美国的疫情和移民政策担心，但这像San Andreas断层积蓄百年的地震一样担心也无济于事；也没有职场上的PUA——7月到现在基本独自做一个million级revenue的项目，虽然消耗了巨大的能量（两个月来70+的commits，~10K行代码），但就算换组也很难得到同规模、有长期impact和学习价值的项目。我的确考虑过从湾区relocate到西雅图，但那是基于城市环境和物价——想继续待在Ads的话工作方面说不定是个巨大的cons。\n\n导致负面情绪的有两点，其一是与他人比较，其二是堆积没做完的事情——具体原因基于多少的羞耻心在此不表；受此影响最有标志性的事件大概是推迟了AWS SAA考试足足三次，导致现在已经被拉黑禁止reschedule了。而恢复的契机是散心为目的读了《断舍离》，深受感动周末做了一波大扫除，弄出来三四袋垃圾后真的恢复了不少对生活的掌控感，之后趁热打铁做了很多计划而没做的事情，一方面是清理内心buffer，一方面是通过「切る」得到自信。某种意义上，这篇杂谈的主题就是推荐《断舍离》，其它想写的事情大多是流水帐。\n\n最近最重要的事情大概是「健康」。9月做了体检，时隔一年肝酶依然高，于是去Palo Alto Medical Foundation做了全腹B超，过程大约是腹部涂油仪器扫描。说是两天出结果其实当天就好了，唯一的不满是花了$600(我今年还没用到deductible)。B超显示肝脏有脂肪，和验血结果LDL偏高吻合。需要注意的是，我的BMI值只有20，脂肪肝绝不是看着肥胖的人才会得的。经过一年WFH，吃得不注意而运动量又低，倒不如是很多人都该去做个体检。\n\n外卖也好，自己做饭也好，「随意」的话都不会健康。最近做了些investigation后自己也在思考，其实北美码农圈子习以为常的基本想吃什么吃什么，想吃多少吃多少的生活在人类历史上都是罕见的，换句话说基因还没学习过吃得过过多的情形。不增肌的话成年人每天只需要手掌大小的肉排，一份牛排或火锅远超这个量了(我之前经常煎美式牛排做配菜)。于是经过一夏天吃了大量的外卖后，这段时间又重新开始做饭，但是改用更丰富的食材，增加杂粮和蔬果，减少畜肉和油脂。\n\n买菜的途径主要有两个，蔬果/海鲜等要挑选的去家边上的超市，冷鲜肉和美国少见点的食材通过Weee——插句话，BOA的Cash Rewards卡支持自选categroy加上资产的倍率，已经是我心目中的懒人神卡了。除了营养和好奇心，用更多样食材做饭也能学很多豆知识，比如各种鱼——Halibut大比目鱼，Tilapia罗非鱼，Swordfish，以及各种杂粮——这几天煮饭我用的就是白米混合wild rice mix，黑长的野米，棕色的Bastami糙米和白米，视觉和口味都很棒。\n\n工作方面，手上的新项目延续last-touch attribution思路和C++/Go的stack，没有太多可谈的。最大的收获是在做大型项目时，规划和取舍的经验和各种missing pieces。为了赶deadline，我在协商后推后了很多让pipeline更robust的工作，让实验跑起来再优化。值得一体的是我把推后的工作和组里现有产品的问题总结成了一批fix-it items，可以借此刷一点leadership。\n\n今年做得最好的一点是保持了阅读的习惯。哪怕在低谷的几周，我也重看了几本金庸的小说，这也有全新的收获，比如郭靖观看黄药师和欧阳锋乐器比试时想，「刚不可久，柔不可守，至此为极，人力有穷」——谁说郭靖是个傻小子来着？而找客服解锁了Amazon国区上的买Kindle书和借阅限制后，更是实现了以白菜价看书(虽然Kindle的UI用多久都觉得不friendly)。最近看书能够抱着抬杠心理去芜存菁，算是同比少年时代的进步。\n\n---\n\n执着于以中秋的为题另一原因是重温《武林外传》时看「庆中秋好梦一日游，历磨难客栈重聚首」，就像那集的主题，把幸福寄托于「如果」是没有意义的。","source":"_posts/mid-autumn-updates.md","raw":"---\ntitle: 中秋杂谈\ndate: 2020-10-17 12:39:41\ntags:\n- 杂谈\n---\n中秋已经过去一段时间了，但时节很适合作为阶段的period，姑且当回标题党。\n近况简单总结，从夏末开始因为工作和生活问题陷入了长时间的低潮，直到近两周才慢慢恢复，原因一方面是通过努力解决直接困扰我的问题，还有做了许多其它事情收获了各种各样的经历。\n<!-- more -->\n\n低潮的原因不是来自外界，就算对美国的疫情和移民政策担心，但这像San Andreas断层积蓄百年的地震一样担心也无济于事；也没有职场上的PUA——7月到现在基本独自做一个million级revenue的项目，虽然消耗了巨大的能量（两个月来70+的commits，~10K行代码），但就算换组也很难得到同规模、有长期impact和学习价值的项目。我的确考虑过从湾区relocate到西雅图，但那是基于城市环境和物价——想继续待在Ads的话工作方面说不定是个巨大的cons。\n\n导致负面情绪的有两点，其一是与他人比较，其二是堆积没做完的事情——具体原因基于多少的羞耻心在此不表；受此影响最有标志性的事件大概是推迟了AWS SAA考试足足三次，导致现在已经被拉黑禁止reschedule了。而恢复的契机是散心为目的读了《断舍离》，深受感动周末做了一波大扫除，弄出来三四袋垃圾后真的恢复了不少对生活的掌控感，之后趁热打铁做了很多计划而没做的事情，一方面是清理内心buffer，一方面是通过「切る」得到自信。某种意义上，这篇杂谈的主题就是推荐《断舍离》，其它想写的事情大多是流水帐。\n\n最近最重要的事情大概是「健康」。9月做了体检，时隔一年肝酶依然高，于是去Palo Alto Medical Foundation做了全腹B超，过程大约是腹部涂油仪器扫描。说是两天出结果其实当天就好了，唯一的不满是花了$600(我今年还没用到deductible)。B超显示肝脏有脂肪，和验血结果LDL偏高吻合。需要注意的是，我的BMI值只有20，脂肪肝绝不是看着肥胖的人才会得的。经过一年WFH，吃得不注意而运动量又低，倒不如是很多人都该去做个体检。\n\n外卖也好，自己做饭也好，「随意」的话都不会健康。最近做了些investigation后自己也在思考，其实北美码农圈子习以为常的基本想吃什么吃什么，想吃多少吃多少的生活在人类历史上都是罕见的，换句话说基因还没学习过吃得过过多的情形。不增肌的话成年人每天只需要手掌大小的肉排，一份牛排或火锅远超这个量了(我之前经常煎美式牛排做配菜)。于是经过一夏天吃了大量的外卖后，这段时间又重新开始做饭，但是改用更丰富的食材，增加杂粮和蔬果，减少畜肉和油脂。\n\n买菜的途径主要有两个，蔬果/海鲜等要挑选的去家边上的超市，冷鲜肉和美国少见点的食材通过Weee——插句话，BOA的Cash Rewards卡支持自选categroy加上资产的倍率，已经是我心目中的懒人神卡了。除了营养和好奇心，用更多样食材做饭也能学很多豆知识，比如各种鱼——Halibut大比目鱼，Tilapia罗非鱼，Swordfish，以及各种杂粮——这几天煮饭我用的就是白米混合wild rice mix，黑长的野米，棕色的Bastami糙米和白米，视觉和口味都很棒。\n\n工作方面，手上的新项目延续last-touch attribution思路和C++/Go的stack，没有太多可谈的。最大的收获是在做大型项目时，规划和取舍的经验和各种missing pieces。为了赶deadline，我在协商后推后了很多让pipeline更robust的工作，让实验跑起来再优化。值得一体的是我把推后的工作和组里现有产品的问题总结成了一批fix-it items，可以借此刷一点leadership。\n\n今年做得最好的一点是保持了阅读的习惯。哪怕在低谷的几周，我也重看了几本金庸的小说，这也有全新的收获，比如郭靖观看黄药师和欧阳锋乐器比试时想，「刚不可久，柔不可守，至此为极，人力有穷」——谁说郭靖是个傻小子来着？而找客服解锁了Amazon国区上的买Kindle书和借阅限制后，更是实现了以白菜价看书(虽然Kindle的UI用多久都觉得不friendly)。最近看书能够抱着抬杠心理去芜存菁，算是同比少年时代的进步。\n\n---\n\n执着于以中秋的为题另一原因是重温《武林外传》时看「庆中秋好梦一日游，历磨难客栈重聚首」，就像那集的主题，把幸福寄托于「如果」是没有意义的。","slug":"mid-autumn-updates","published":1,"updated":"2020-10-18T08:09:49.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgeu0hsx0007bktzxsu99q43","content":"<p>中秋已经过去一段时间了，但时节很适合作为阶段的period，姑且当回标题党。<br>近况简单总结，从夏末开始因为工作和生活问题陷入了长时间的低潮，直到近两周才慢慢恢复，原因一方面是通过努力解决直接困扰我的问题，还有做了许多其它事情收获了各种各样的经历。<br><a id=\"more\"></a></p>\n<p>低潮的原因不是来自外界，就算对美国的疫情和移民政策担心，但这像San Andreas断层积蓄百年的地震一样担心也无济于事；也没有职场上的PUA——7月到现在基本独自做一个million级revenue的项目，虽然消耗了巨大的能量（两个月来70+的commits，~10K行代码），但就算换组也很难得到同规模、有长期impact和学习价值的项目。我的确考虑过从湾区relocate到西雅图，但那是基于城市环境和物价——想继续待在Ads的话工作方面说不定是个巨大的cons。</p>\n<p>导致负面情绪的有两点，其一是与他人比较，其二是堆积没做完的事情——具体原因基于多少的羞耻心在此不表；受此影响最有标志性的事件大概是推迟了AWS SAA考试足足三次，导致现在已经被拉黑禁止reschedule了。而恢复的契机是散心为目的读了《断舍离》，深受感动周末做了一波大扫除，弄出来三四袋垃圾后真的恢复了不少对生活的掌控感，之后趁热打铁做了很多计划而没做的事情，一方面是清理内心buffer，一方面是通过「切る」得到自信。某种意义上，这篇杂谈的主题就是推荐《断舍离》，其它想写的事情大多是流水帐。</p>\n<p>最近最重要的事情大概是「健康」。9月做了体检，时隔一年肝酶依然高，于是去Palo Alto Medical Foundation做了全腹B超，过程大约是腹部涂油仪器扫描。说是两天出结果其实当天就好了，唯一的不满是花了$600(我今年还没用到deductible)。B超显示肝脏有脂肪，和验血结果LDL偏高吻合。需要注意的是，我的BMI值只有20，脂肪肝绝不是看着肥胖的人才会得的。经过一年WFH，吃得不注意而运动量又低，倒不如是很多人都该去做个体检。</p>\n<p>外卖也好，自己做饭也好，「随意」的话都不会健康。最近做了些investigation后自己也在思考，其实北美码农圈子习以为常的基本想吃什么吃什么，想吃多少吃多少的生活在人类历史上都是罕见的，换句话说基因还没学习过吃得过过多的情形。不增肌的话成年人每天只需要手掌大小的肉排，一份牛排或火锅远超这个量了(我之前经常煎美式牛排做配菜)。于是经过一夏天吃了大量的外卖后，这段时间又重新开始做饭，但是改用更丰富的食材，增加杂粮和蔬果，减少畜肉和油脂。</p>\n<p>买菜的途径主要有两个，蔬果/海鲜等要挑选的去家边上的超市，冷鲜肉和美国少见点的食材通过Weee——插句话，BOA的Cash Rewards卡支持自选categroy加上资产的倍率，已经是我心目中的懒人神卡了。除了营养和好奇心，用更多样食材做饭也能学很多豆知识，比如各种鱼——Halibut大比目鱼，Tilapia罗非鱼，Swordfish，以及各种杂粮——这几天煮饭我用的就是白米混合wild rice mix，黑长的野米，棕色的Bastami糙米和白米，视觉和口味都很棒。</p>\n<p>工作方面，手上的新项目延续last-touch attribution思路和C++/Go的stack，没有太多可谈的。最大的收获是在做大型项目时，规划和取舍的经验和各种missing pieces。为了赶deadline，我在协商后推后了很多让pipeline更robust的工作，让实验跑起来再优化。值得一体的是我把推后的工作和组里现有产品的问题总结成了一批fix-it items，可以借此刷一点leadership。</p>\n<p>今年做得最好的一点是保持了阅读的习惯。哪怕在低谷的几周，我也重看了几本金庸的小说，这也有全新的收获，比如郭靖观看黄药师和欧阳锋乐器比试时想，「刚不可久，柔不可守，至此为极，人力有穷」——谁说郭靖是个傻小子来着？而找客服解锁了Amazon国区上的买Kindle书和借阅限制后，更是实现了以白菜价看书(虽然Kindle的UI用多久都觉得不friendly)。最近看书能够抱着抬杠心理去芜存菁，算是同比少年时代的进步。</p>\n<hr>\n<p>执着于以中秋的为题另一原因是重温《武林外传》时看「庆中秋好梦一日游，历磨难客栈重聚首」，就像那集的主题，把幸福寄托于「如果」是没有意义的。</p>\n","site":{"data":{}},"excerpt":"<p>中秋已经过去一段时间了，但时节很适合作为阶段的period，姑且当回标题党。<br>近况简单总结，从夏末开始因为工作和生活问题陷入了长时间的低潮，直到近两周才慢慢恢复，原因一方面是通过努力解决直接困扰我的问题，还有做了许多其它事情收获了各种各样的经历。<br>","more":"</p>\n<p>低潮的原因不是来自外界，就算对美国的疫情和移民政策担心，但这像San Andreas断层积蓄百年的地震一样担心也无济于事；也没有职场上的PUA——7月到现在基本独自做一个million级revenue的项目，虽然消耗了巨大的能量（两个月来70+的commits，~10K行代码），但就算换组也很难得到同规模、有长期impact和学习价值的项目。我的确考虑过从湾区relocate到西雅图，但那是基于城市环境和物价——想继续待在Ads的话工作方面说不定是个巨大的cons。</p>\n<p>导致负面情绪的有两点，其一是与他人比较，其二是堆积没做完的事情——具体原因基于多少的羞耻心在此不表；受此影响最有标志性的事件大概是推迟了AWS SAA考试足足三次，导致现在已经被拉黑禁止reschedule了。而恢复的契机是散心为目的读了《断舍离》，深受感动周末做了一波大扫除，弄出来三四袋垃圾后真的恢复了不少对生活的掌控感，之后趁热打铁做了很多计划而没做的事情，一方面是清理内心buffer，一方面是通过「切る」得到自信。某种意义上，这篇杂谈的主题就是推荐《断舍离》，其它想写的事情大多是流水帐。</p>\n<p>最近最重要的事情大概是「健康」。9月做了体检，时隔一年肝酶依然高，于是去Palo Alto Medical Foundation做了全腹B超，过程大约是腹部涂油仪器扫描。说是两天出结果其实当天就好了，唯一的不满是花了$600(我今年还没用到deductible)。B超显示肝脏有脂肪，和验血结果LDL偏高吻合。需要注意的是，我的BMI值只有20，脂肪肝绝不是看着肥胖的人才会得的。经过一年WFH，吃得不注意而运动量又低，倒不如是很多人都该去做个体检。</p>\n<p>外卖也好，自己做饭也好，「随意」的话都不会健康。最近做了些investigation后自己也在思考，其实北美码农圈子习以为常的基本想吃什么吃什么，想吃多少吃多少的生活在人类历史上都是罕见的，换句话说基因还没学习过吃得过过多的情形。不增肌的话成年人每天只需要手掌大小的肉排，一份牛排或火锅远超这个量了(我之前经常煎美式牛排做配菜)。于是经过一夏天吃了大量的外卖后，这段时间又重新开始做饭，但是改用更丰富的食材，增加杂粮和蔬果，减少畜肉和油脂。</p>\n<p>买菜的途径主要有两个，蔬果/海鲜等要挑选的去家边上的超市，冷鲜肉和美国少见点的食材通过Weee——插句话，BOA的Cash Rewards卡支持自选categroy加上资产的倍率，已经是我心目中的懒人神卡了。除了营养和好奇心，用更多样食材做饭也能学很多豆知识，比如各种鱼——Halibut大比目鱼，Tilapia罗非鱼，Swordfish，以及各种杂粮——这几天煮饭我用的就是白米混合wild rice mix，黑长的野米，棕色的Bastami糙米和白米，视觉和口味都很棒。</p>\n<p>工作方面，手上的新项目延续last-touch attribution思路和C++/Go的stack，没有太多可谈的。最大的收获是在做大型项目时，规划和取舍的经验和各种missing pieces。为了赶deadline，我在协商后推后了很多让pipeline更robust的工作，让实验跑起来再优化。值得一体的是我把推后的工作和组里现有产品的问题总结成了一批fix-it items，可以借此刷一点leadership。</p>\n<p>今年做得最好的一点是保持了阅读的习惯。哪怕在低谷的几周，我也重看了几本金庸的小说，这也有全新的收获，比如郭靖观看黄药师和欧阳锋乐器比试时想，「刚不可久，柔不可守，至此为极，人力有穷」——谁说郭靖是个傻小子来着？而找客服解锁了Amazon国区上的买Kindle书和借阅限制后，更是实现了以白菜价看书(虽然Kindle的UI用多久都觉得不friendly)。最近看书能够抱着抬杠心理去芜存菁，算是同比少年时代的进步。</p>\n<hr>\n<p>执着于以中秋的为题另一原因是重温《武林外传》时看「庆中秋好梦一日游，历磨难客栈重聚首」，就像那集的主题，把幸福寄托于「如果」是没有意义的。</p>"}],"PostAsset":[{"_id":"source/_posts/m5-forecasting/importance.png","post":"ckgeu0hsr0003bktzulivryhe","slug":"importance.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckgeu0hss0004bktz2ag18t7y","tag_id":"ckgeu0hu80008bktzkfk7prt6","_id":"ckgeu0hv1000ebktzvpqe31ey"},{"post_id":"ckgeu0hsu0005bktz8ukhbo1n","tag_id":"ckgeu0hu80008bktzkfk7prt6","_id":"ckgeu0hv1000fbktzzox7843u"},{"post_id":"ckgeu0hsu0005bktz8ukhbo1n","tag_id":"ckgeu0huf000abktzu04p757k","_id":"ckgeu0hv1000gbktz9zh31ats"},{"post_id":"ckgeu0hsu0005bktz8ukhbo1n","tag_id":"ckgeu0hug000bbktzmo8dnchj","_id":"ckgeu0hv2000hbktz6hs9jz8s"},{"post_id":"ckgeu0hsw0006bktzm0gtog19","tag_id":"ckgeu0huh000cbktzayeyu3bs","_id":"ckgeu0hv2000ibktzcxyargko"},{"post_id":"ckgeu0hsx0007bktzxsu99q43","tag_id":"ckgeu0huh000cbktzayeyu3bs","_id":"ckgeu0hv3000jbktz8zmqnngd"}],"Tag":[{"name":"编程","_id":"ckgeu0hu80008bktzkfk7prt6"},{"name":"架构","_id":"ckgeu0huf000abktzu04p757k"},{"name":"AWS","_id":"ckgeu0hug000bbktzmo8dnchj"},{"name":"杂谈","_id":"ckgeu0huh000cbktzayeyu3bs"}]}}